{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/package.json","manyfest.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","source/Manyfest-CleanWrapCharacters.js","source/Manyfest-HashTranslation.js","source/Manyfest-LogToConsole.js","source/Manyfest-ObjectAddress-CheckAddressExists.js","source/Manyfest-ObjectAddress-DeleteValue.js","source/Manyfest-ObjectAddress-GetValue.js","source/Manyfest-ObjectAddress-Parser.js","source/Manyfest-ObjectAddress-SetValue.js","source/Manyfest-ObjectAddressGeneration.js","source/Manyfest-ParseConditionals.js","source/Manyfest-SchemaManipulation.js","source/Manyfest.js"],"names":["f","exports","module","define","amd","g","window","global","self","Manyfest","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","libPackage","FableServiceProviderBase","constructor","pFable","pOptions","pServiceHash","isFable","connectFable","fable","_PackageFableServiceProvider","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","_defineProperty","CoreServiceProviderBase","cleanWrapCharacters","pCharacter","pString","startsWith","endsWith","substring","libSimpleLog","ManyfestHashTranslation","pInfoLog","pErrorLog","logInfo","logError","translationTable","translationCount","Object","keys","addTranslation","pTranslation","tmpTranslationSources","forEach","pTranslationSource","removeTranslationHash","pTranslationHash","removeTranslation","clearTranslations","translate","logToConsole","pLogLine","pLogObject","tmpLogLine","JSON","stringify","libGetObjectValue","_MockFable","DataFormat","ManyfestObjectAddressResolverCheckAddressExists","getObjectValueClass","checkAddressExists","pObject","pAddress","pRootObject","tmpRootObject","tmpAddressPartBeginning","stringGetFirstSegment","tmpBracketStartIndex","indexOf","tmpBracketStopIndex","tmpFunctionStartIndex","stringCountEnclosures","tmpFunctionAddress","trim","tmpBoxedPropertyName","tmpBoxedPropertyReference","tmpBoxedPropertyNumber","parseInt","Array","isArray","isNaN","tmpSubObjectName","tmpNewAddress","tmpFunctionArguments","stringGetSegments","stringGetEnclosureValueByIndex","apply","pError","message","tmpArgumentValues","push","getValueAtAddress","fCleanWrapCharacters","fParseConditionals","ManyfestObjectAddressResolverDeleteValue","checkRecordFilters","pRecord","deleteValueAtAddress","pParentAddress","undefined","tmpParentAddress","tmpSeparatorIndex","tmpObjectTypeMarkerIndex","tmpInputArray","tmpKeepRecord","splice","tmpObjectPropertyName","tmpArrayProperty","tmpContainerObject","tmpPropertyParentAddress","tmpValue","tmpObjectProperty","tmpObjectPropertyKeys","ManyfestObjectAddressResolverGetValue","tmpParentAddressParts","tmpBackNavigationCount","charAt","tmpParentAddressLength","tmpRecurseAddress","slice","join","tmpOutputArray","stringCountSegments","pSeparator","pEnclosureStartSymbolMap","pEnclosureEndSymbolMap","tmpString","tmpSeparator","tmpEnclosureStartSymbolMap","pEnclosureStart","tmpEnclosureEndSymbolMap","pEnclosureEnd","tmpSegmentCount","tmpEnclosureStack","pop","tmpCurrentSegmentStart","tmpSegmentList","tmpEnclosureStart","tmpEnclosureEnd","tmpEnclosureCount","tmpEnclosureDepth","pEnclosureIndexToGet","tmpEnclosureIndexToGet","tmpMatchedEnclosureIndex","tmpEnclosedValueStartIndex","tmpEnclosedValueEndIndex","ManyfestObjectAddressSetValue","setValueAtAddress","pValue","tmpIndexIsNumeric","ManyfestObjectAddressGeneration","generateAddressses","pBaseAddress","pSchema","tmpBaseAddress","tmpSchema","tmpObjectType","tmpSchemaObjectEntry","Address","Name","InSchema","DataType","Default","tmpObjectProperties","_ConditionalStanzaStart","_ConditionalStanzaStartLength","_ConditionalStanzaEnd","_ConditionalStanzaEndLength","testCondition","pManyfest","pSearchAddress","pSearchComparator","parseConditionals","tmpStartIndex","tmpStopIndex","tmpMagicComparisonPatternSet","split","tmpSearchAddress","tmpSearchComparator","tmpSearchValue","ManyfestSchemaManipulation","resolveAddressMappings","pManyfestSchemaDescriptors","pAddressMapping","tmpManyfestAddresses","tmpHashMapping","tmpAddressMappingSet","pInputAddress","tmpNewDescriptorAddress","tmpOldDescriptorAddress","tmpDescriptor","safeResolveAddressMappings","tmpManyfestSchemaDescriptors","parse","mergeAddressMappings","pManyfestSchemaDescriptorsDestination","pManyfestSchemaDescriptorsSource","tmpSource","tmpNewManyfestSchemaDescriptors","tmpDescriptorAddresses","pDescriptorAddress","libFableServiceProviderBase","libHashTranslation","libObjectAddressCheckAddressExists","libObjectAddressGetValue","libObjectAddressSetValue","libObjectAddressDeleteValue","libObjectAddressGeneration","libSchemaManipulation","_DefaultConfiguration","Scope","Descriptors","pManifest","objectAddressCheckAddressExists","objectAddressGetValue","objectAddressSetValue","objectAddressDeleteValue","defaultValues","strict","scope","elementAddresses","elementHashes","elementDescriptors","reset","loadManifest","schemaManipulations","objectAddressGeneration","hashTranslations","numberRegex","clone","tmpNewOptions","tmpNewManyfest","getManifest","deserialize","pManifestString","tmpManifest","tmpDescriptorKeys","tmpDescriptionAddresses","addDescriptor","HashTranslations","serialize","pDescriptor","getDescriptorByHash","pHash","getDescriptor","resolveHashAddress","eachDescriptor","fAction","checkAddressExistsByHash","tmpAddress","tmpInElementHashTable","tmpInTranslationTable","getValueByHash","getDefaultValue","lintAddress","tmpLintedAddress","setValueByHash","deleteValueByHash","validate","tmpValidationData","Errors","MissingElements","addValidationError","pErrorMessage","tmpValueExists","Required","tmpElementType","toString","toLowerCase","test","tmpValueString","tmpValueDate","Date","tmpDataType","populateDefaults","pOverwriteProperties","populateObject","fFilter","tmpObject","tmpOverwriteProperties","tmpFilterFunction"],"mappings":"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","file":"manyfest.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Manyfest = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nmodule.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{\"../package.json\":1}],3:[function(require,module,exports){\n// When a boxed property is passed in, it should have quotes of some\n// kind around it.\n//\n// For instance:\n// \t\tMyValues['Name']\n// \t\tMyValues[\"Age\"]\n// \t\tMyValues[`Cost`]\n//\n// This function removes the wrapping quotes.\n//\n// Please note it *DOES NOT PARSE* template literals, so backticks just\n// end up doing the same thing as other quote types.\n//\n// TODO: Should template literals be processed?  If so what state do they have access to?  That should happen here if so.\n// TODO: Make a simple class include library with these\nconst cleanWrapCharacters = (pCharacter, pString) =>\n{\n\tif (pString.startsWith(pCharacter) && pString.endsWith(pCharacter))\n\t{\n\t\treturn pString.substring(1, pString.length - 1);\n\t}\n\telse\n\t{\n\t\treturn pString;\n\t}\n};\n\nmodule.exports = cleanWrapCharacters;\n},{}],4:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\n/**\n* Hash Translation\n*\n* This is a very simple translation table for hashes, which allows the same schema to resolve\n* differently based on a loaded translation table.\n*\n* This is to prevent the requirement for mutating schemas over and over again when we want to\n* reuse the structure but look up data elements by different addresses.\n*\n* One side-effect of this is that a translation table can \"override\" the built-in hashes, since\n* this is always used to resolve hashes before any of the functionCallByHash(pHash, ...) perform\n* their lookups by hash.\n*\n* @class ManyfestHashTranslation\n*/\nclass ManyfestHashTranslation\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) === 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) === 'function') ? pErrorLog : libSimpleLog;\n\n        this.translationTable = {};\n\t}\n\n    translationCount()\n    {\n        return Object.keys(this.translationTable).length;\n    }\n\n    addTranslation(pTranslation)\n    {\n        // This adds a translation in the form of:\n        // { \"SourceHash\": \"DestinationHash\", \"SecondSourceHash\":\"SecondDestinationHash\" }\n        if (typeof(pTranslation) != 'object')\n        {\n            this.logError(`Hash translation addTranslation expected a translation be type object but was passed in ${typeof(pTranslation)}`);\n            return false;\n        }\n\n        let tmpTranslationSources = Object.keys(pTranslation)\n\n        tmpTranslationSources.forEach(\n            (pTranslationSource) =>\n            {\n                if (typeof(pTranslation[pTranslationSource]) != 'string')\n                {\n                    this.logError(`Hash translation addTranslation expected a translation destination hash for [${pTranslationSource}] to be a string but the referrant was a ${typeof(pTranslation[pTranslationSource])}`);\n                }\n                else\n                {\n                    this.translationTable[pTranslationSource] = pTranslation[pTranslationSource];\n                }\n            });\n    }\n\n    removeTranslationHash(pTranslationHash)\n    {\n        if (pTranslationHash in this.translationTable)\n        {\n            delete this.translationTable[pTranslationHash];\n        }\n    }\n\n    // This removes translations.\n    // If passed a string, just removes the single one.\n    // If passed an object, it does all the source keys.\n    removeTranslation(pTranslation)\n    {\n        if (typeof(pTranslation) == 'string')\n        {\n            this.removeTranslationHash(pTranslation);\n            return true;\n        }\n        else if (typeof(pTranslation) == 'object')\n        {\n            let tmpTranslationSources = Object.keys(pTranslation)\n\n            tmpTranslationSources.forEach(\n                (pTranslationSource) =>\n                {\n                    this.removeTranslation(pTranslationSource);\n                });\n            return true;\n        }\n        else\n        {\n            this.logError(`Hash translation removeTranslation expected either a string or an object but the passed-in translation was type ${typeof(pTranslation)}`);\n            return false;\n        }\n    }\n\n    clearTranslations()\n    {\n        this.translationTable = {};\n    }\n\n    translate(pTranslation)\n    {\n        if (pTranslation in this.translationTable)\n        {\n            return this.translationTable[pTranslation];\n        }\n        else\n        {\n            return pTranslation;\n        }\n    }\n}\n\nmodule.exports = ManyfestHashTranslation;\n},{\"./Manyfest-LogToConsole.js\":5}],5:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\n\n/**\n* Manyfest simple logging shim (for browser and dependency-free running)\n*/\n\nconst logToConsole = (pLogLine, pLogObject) =>\n{\n    let tmpLogLine = (typeof(pLogLine) === 'string') ? pLogLine : '';\n\n    console.log(`[Manyfest] ${tmpLogLine}`);\n\n    if (pLogObject) console.log(JSON.stringify(pLogObject));\n};\n\nmodule.exports = logToConsole;\n},{}],6:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nconst libSimpleLog = require('./Manyfest-LogToConsole.js');\n// This is for resolving functions mid-address\nconst libGetObjectValue = require('./Manyfest-ObjectAddress-GetValue.js');\n\n// TODO: Just until this is a fable service.\nlet _MockFable = { DataFormat: require('./Manyfest-ObjectAddress-Parser.js') };\n\n/**\n* Object Address Resolver\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n*\n* @class ManyfestObjectAddressResolverCheckAddressExists\n*/\nclass ManyfestObjectAddressResolverCheckAddressExists\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.getObjectValueClass = new libGetObjectValue(this.logInfo, this.logError);\n\t}\n\n\t// Check if an address exists.\n\t//\n\t// This is necessary because the getValueAtAddress function is ambiguous on\n\t// whether the element/property is actually there or not (it returns\n\t// undefined whether the property exists or not).  This function checks for\n\t// existance and returns true or false dependent.\n\tcheckAddressExists (pObject, pAddress, pRootObject)\n\t{\n\t\t// TODO: Should these throw an error?\n\t\t// Make sure pObject is an object\n\t\tif (typeof(pObject) != 'object') return false;\n\t\t// Make sure pAddress is a string\n\t\tif (typeof(pAddress) != 'string') return false;\n\n\t\t// Set the root object to the passed-in object if it isn't set yet.  This is expected to be the root object.\n\t\t// NOTE: This was added to support functions mid-stream\n\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t// DONE: Make this work for things like SomeRootObject.Metadata[\"Some.People.Use.Bad.Object.Property.Names\"]\n\t\tlet tmpAddressPartBeginning = _MockFable.DataFormat.stringGetFirstSegment(pAddress);\n\n\t\t// This is the terminal address string (no more dots so the RECUSION ENDS IN HERE somehow)\n\t\tif (tmpAddressPartBeginning.length == pAddress.length)\n\t\t{\n\t\t\t// Check if the address refers to a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = pAddress.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(pAddress) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = pAddress.substring(0, tmpFunctionStartIndex).trim();\n\n\t\t\t\tif (((tmpFunctionAddress in pObject)) && (typeof(pObject[tmpFunctionAddress]) == 'function'))\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Check if the property exists.\n\t\t\t\t\treturn (tmpBoxedPropertyReference in pObject[tmpBoxedPropertyName]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Use the new in operator to see if the element is in the array\n\t\t\t\t\treturn (tmpBoxedPropertyNumber in pObject[tmpBoxedPropertyName]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Check if the property exists\n\t\t\t\treturn (pAddress in pObject);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpSubObjectName = tmpAddressPartBeginning;\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpAddressPartBeginning.length+1);\n\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = tmpSubObjectName.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(tmpSubObjectName) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = tmpSubObjectName.substring(0, tmpFunctionStartIndex).trim();\n\t\t\t\t//tmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\n\t\t\t\tif (!typeof(pObject[tmpFunctionAddress]) == 'function')\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Now see if the function has arguments.\n\t\t\t\t// Implementation notes: * ARGUMENTS MUST SHARE THE SAME ROOT OBJECT CONTEXT *\n\t\t\t\tlet tmpFunctionArguments = _MockFable.DataFormat.stringGetSegments(_MockFable.DataFormat.stringGetEnclosureValueByIndex(tmpSubObjectName.substring(tmpFunctionAddress.length), 0), ',');\n\t\t\t\tif ((tmpFunctionArguments.length == 0) || (tmpFunctionArguments[0] == ''))\n\t\t\t\t{\n\t\t\t\t\t// No arguments... just call the function (bound to the scope of the object it is contained withing)\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.checkAddressExists(pObject[tmpFunctionAddress].apply(pObject), tmpNewAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tlibSimpleLog.log(`Error calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tlibSimpleLog.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet tmpArgumentValues = [];\n\n\t\t\t\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t\t\t\t// Now get the value for each argument\n\t\t\t\t\tfor (let i = 0; i < tmpFunctionArguments.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Resolve the values for each subsequent entry\n\t\t\t\t\t\t// NOTE: This is where the resolves get really tricky.  Recursion within recursion.  Programming gom jabbar, yo.\n\t\t\t\t\t\ttmpArgumentValues.push(this.getObjectValueClass.getValueAtAddress(tmpRootObject, tmpFunctionArguments[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\t//return this.checkAddressExists(pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues), tmpNewAddress, tmpRootObject);\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.checkAddressExists(pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues), tmpNewAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tlibSimpleLog.log(`Error calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tlibSimpleLog.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// Because this is an impossible address, the property doesn't exist\n\t\t\t\t\t// TODO: Should we throw an error in this condition?\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.checkAddressExists(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.checkAddressExists(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\treturn this.checkAddressExists(pObject[tmpSubObjectName], tmpNewAddress, tmpRootObject);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.checkAddressExists(pObject[tmpSubObjectName], tmpNewAddress, tmpRootObject);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressResolverCheckAddressExists;\n\n},{\"./Manyfest-LogToConsole.js\":5,\"./Manyfest-ObjectAddress-GetValue.js\":8,\"./Manyfest-ObjectAddress-Parser.js\":9}],7:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\nlet fCleanWrapCharacters = require('./Manyfest-CleanWrapCharacters.js');\nlet fParseConditionals = require(`../source/Manyfest-ParseConditionals.js`)\n\n/**\n* Object Address Resolver - DeleteValue\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n* TODO: Once we validate this pattern is good to go, break these out into\n*       three separate modules.\n*\n* @class ManyfestObjectAddressResolverDeleteValue\n*/\nclass ManyfestObjectAddressResolverDeleteValue\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.cleanWrapCharacters = fCleanWrapCharacters;\n\t}\n\n\t// TODO: Dry me\n\tcheckRecordFilters(pAddress, pRecord)\n\t{\n\t\treturn fParseConditionals(this, pAddress, pRecord);\n\t}\n\n\t// Delete the value of an element at an address\n\tdeleteValueAtAddress (pObject, pAddress, pParentAddress)\n\t{\n\t\t// Make sure pObject (the object we are meant to be recursing) is an object (which could be an array or object)\n\t\tif (typeof(pObject) != 'object') return undefined;\n\t\t// Make sure pAddress (the address we are resolving) is a string\n\t\tif (typeof(pAddress) != 'string') return undefined;\n\t\t// Stash the parent address for later resolution\n\t\tlet tmpParentAddress = \"\";\n\t\tif (typeof(pParentAddress) == 'string')\n\t\t{\n\t\t\ttmpParentAddress = pParentAddress;\n\t\t}\n\n\t\t// TODO: Make this work for things like SomeRootObject.Metadata[\"Some.People.Use.Bad.Object.Property.Names\"]\n\t\tlet tmpSeparatorIndex = pAddress.indexOf('.');\n\n\t\t// This is the terminal address string (no more dots so the RECUSION ENDS IN HERE somehow)\n\t\tif (tmpSeparatorIndex == -1)\n\t\t{\n\t\t\t// Check if the address refers to a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\n\t\t\t// Check for the Object Set Type marker.\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Return the value in the property\n\t\t\t\t\tdelete pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference];\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber];\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tlet tmpInputArray = pObject[tmpBoxedPropertyName];\n\t\t\t\t// Count from the end to the beginning so splice doesn't %&%#$ up the array\n\t\t\t\tfor (let i = tmpInputArray.length - 1; i >= 0; i--)\n\t\t\t\t{\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpInputArray[i]);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Delete elements end to beginning\n\t\t\t\t\t\ttmpInputArray.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// The object has been flagged as an object set, so treat it as such\n\t\t\telse if (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tdelete pObject[tmpObjectPropertyName];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Now is the point in recursion to return the value in the address\n\t\t\t\tdelete pObject[pAddress];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpSubObjectName = pAddress.substring(0, tmpSeparatorIndex);\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpSeparatorIndex+1);\n\n\t\t\t// BOXED ELEMENTS\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check if the boxed property is an object.\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, tmpParentAddress);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, tmpParentAddress);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the array and grab the addresses from there.\n\t\t\t\tlet tmpArrayProperty = pObject[tmpBoxedPropertyName];\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpBoxedPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpArrayProperty.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}[${i}]`;\n\t\t\t\t\tlet tmpValue = this.deleteValueAtAddress(pObject[tmpBoxedPropertyName][i], tmpNewAddress, tmpPropertyParentAddress);\n\n\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// OBJECT SET\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\t\t\tif (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the Object and grab the addresses from there.\n\t\t\t\tlet tmpObjectProperty = pObject[tmpObjectPropertyName];\n\t\t\t\tlet tmpObjectPropertyKeys = Object.keys(tmpObjectProperty);\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpObjectPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpObjectPropertyKeys.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}.${tmpObjectPropertyKeys[i]}`;\n\t\t\t\t\tlet tmpValue = this.deleteValueAtAddress(pObject[tmpObjectPropertyName][tmpObjectPropertyKeys[i]], tmpNewAddress, tmpPropertyParentAddress);\n\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpValue);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressResolverDeleteValue;\n},{\"../source/Manyfest-ParseConditionals.js\":12,\"./Manyfest-CleanWrapCharacters.js\":3,\"./Manyfest-LogToConsole.js\":5}],8:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\nlet fCleanWrapCharacters = require('./Manyfest-CleanWrapCharacters.js');\nlet fParseConditionals = require(`../source/Manyfest-ParseConditionals.js`);\n\nlet _MockFable = { DataFormat: require('./Manyfest-ObjectAddress-Parser.js') };\n\n/**\n* Object Address Resolver - GetValue\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n* TODO: Once we validate this pattern is good to go, break these out into\n*       three separate modules.\n*\n* @class ManyfestObjectAddressResolverGetValue\n*/\nclass ManyfestObjectAddressResolverGetValue\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.cleanWrapCharacters = fCleanWrapCharacters;\n\t}\n\n\tcheckRecordFilters(pAddress, pRecord)\n\t{\n\t\treturn fParseConditionals(this, pAddress, pRecord);\n\t}\n\n\t// Get the value of an element at an address\n\tgetValueAtAddress (pObject, pAddress, pParentAddress, pRootObject)\n\t{\n\t\t// Make sure pObject (the object we are meant to be recursing) is an object (which could be an array or object)\n\t\tif (typeof(pObject) != 'object')\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\t\tif (pObject === null)\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\t\t// Make sure pAddress (the address we are resolving) is a string\n\t\tif (typeof(pAddress) != 'string')\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\t\t// Stash the parent address for later resolution\n\t\tlet tmpParentAddress = \"\";\n\t\tif (typeof(pParentAddress) == 'string')\n\t\t{\n\t\t\ttmpParentAddress = pParentAddress;\n\t\t}\n\n\t\t// Set the root object to the passed-in object if it isn't set yet.  This is expected to be the root object.\n\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t// DONE: Make this work for things like SomeRootObject.Metadata[\"Some.People.Use.Bad.Object.Property.Names\"]\n\t\tlet tmpAddressPartBeginning = _MockFable.DataFormat.stringGetFirstSegment(pAddress);\n\n\t\t// Adding simple back-navigation in objects\n\t\tif (tmpAddressPartBeginning == '')\n\t\t{\n\t\t\t// Given an address of \"Bundle.Contract.IDContract...Project.IDProject\" the ... would be interpreted as two back-navigations from IDContract.\n\t\t\t// When the address is passed in, though, the first . is already eliminated.  So we can count the dots.\n\t\t\tlet tmpParentAddressParts = _MockFable.DataFormat.stringGetSegments(tmpParentAddress);\n\n\t\t\tlet tmpBackNavigationCount = 0;\n\n\t\t\t// Count the number of dots\n\t\t\tfor (let i = 0; i < pAddress.length; i++)\n\t\t\t{\n\t\t\t\tif (pAddress.charAt(i) != '.')\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttmpBackNavigationCount++;\n\t\t\t}\n\n\t\t\tlet tmpParentAddressLength = tmpParentAddressParts.length - tmpBackNavigationCount;\n\n\t\t\tif (tmpParentAddressLength < 0)\n\t\t\t{\n\t\t\t\t// We are trying to back navigate more than we can.\n\t\t\t\t// TODO: Should this be undefined or should we bank out at the bottom and try to go forward?\n\t\t\t\t// This seems safest for now.\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We are trying to back navigate to a parent object.\n\t\t\t\t// Recurse with the back-propagated parent address, and, the new address without the back-navigation dots.\n\t\t\t\tlet tmpRecurseAddress = pAddress.slice(tmpBackNavigationCount);\n\t\t\t\tif (tmpParentAddressLength > 0)\n\t\t\t\t{\n\t\t\t\t\ttmpRecurseAddress = `${tmpParentAddressParts.slice(0, tmpParentAddressLength).join('.')}.${tmpRecurseAddress}`;\n\t\t\t\t}\n\t\t\t\tthis.logInfo(`Back-navigation detected.  Recursing back to address [${tmpRecurseAddress}]`);\n\t\t\t\treturn this.getValueAtAddress(tmpRootObject, tmpRecurseAddress);\n\t\t\t}\n\t\t}\n\n\t\t// This is the terminal address string (no more dots so the RECUSION ENDS IN HERE somehow)\n\t\tif (tmpAddressPartBeginning.length == pAddress.length)\n\t\t{\n\t\t\t// TODO: Optimize this by having these calls only happen when the previous fails.\n\t\t\t// TODO: Alternatively look for all markers in one pass?\n\t\t\t// Check if the address refers to a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\n\t\t\t// Check for the Object Set Type marker.\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = pAddress.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(pAddress) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = pAddress.substring(0, tmpFunctionStartIndex).trim();\n\n\t\t\t\tif (!typeof(pObject[tmpFunctionAddress]) == 'function')\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Now see if the function has arguments.\n\t\t\t\t// Implementation notes: * ARGUMENTS MUST SHARE THE SAME ROOT OBJECT CONTEXT *\n\t\t\t\tlet tmpFunctionArguments = _MockFable.DataFormat.stringGetSegments(_MockFable.DataFormat.stringGetEnclosureValueByIndex(pAddress.substring(tmpFunctionAddress.length), 0), ',');\n\t\t\t\tif ((tmpFunctionArguments.length == 0) || (tmpFunctionArguments[0] == ''))\n\t\t\t\t{\n\t\t\t\t\t// No arguments... just call the function (bound to the scope of the object it is contained withing)\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn pObject[tmpFunctionAddress].apply(pObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet tmpArgumentValues = [];\n\n\t\t\t\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t\t\t\t// Now get the value for each argument\n\t\t\t\t\tfor (let i = 0; i < tmpFunctionArguments.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Resolve the values for each subsequent entry\n\t\t\t\t\t\t// Check if the argument value is a string literal or a reference to an address\n\t\t\t\t\t\tif ((tmpFunctionArguments[i].length >= 2)\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(0) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"`\"))\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"`\")))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a string literal\n\t\t\t\t\t\t\ttmpArgumentValues.push(tmpFunctionArguments[i].substring(1, tmpFunctionArguments[i].length-1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a hash address\n\t\t\t\t\t\t\ttmpArgumentValues.push(this.getValueAtAddress(tmpRootObject, tmpFunctionArguments[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Return the value in the property\n\t\t\t\t\treturn pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tlet tmpInputArray = pObject[tmpBoxedPropertyName];\n\t\t\t\tlet tmpOutputArray = [];\n\t\t\t\tfor (let i = 0; i < tmpInputArray.length; i++)\n\t\t\t\t{\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpInputArray[i]);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpOutputArray.push(tmpInputArray[i]);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmpOutputArray;\n\t\t\t}\n\t\t\t// The object has been flagged as an object set, so treat it as such\n\t\t\telse if (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn pObject[tmpObjectPropertyName];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Now is the point in recursion to return the value in the address\n\t\t\t\tif (typeof(pObject[pAddress]) != null)\n\t\t\t\t{\n\t\t\t\t\treturn pObject[pAddress];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//let tmpSubObjectName = pAddress.substring(0, tmpSeparatorIndex);\n\t\t\t//let tmpNewAddress = pAddress.substring(tmpSeparatorIndex+1);\n\t\t\tlet tmpSubObjectName = tmpAddressPartBeginning;\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpAddressPartBeginning.length+1);\n\n\t\t\t// BOXED ELEMENTS\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = tmpSubObjectName.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(tmpSubObjectName) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = tmpSubObjectName.substring(0, tmpFunctionStartIndex).trim();\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\n\t\t\t\tif (!typeof(pObject[tmpFunctionAddress]) == 'function')\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Now see if the function has arguments.\n\t\t\t\t// Implementation notes: * ARGUMENTS MUST SHARE THE SAME ROOT OBJECT CONTEXT *\n\t\t\t\tlet tmpFunctionArguments = _MockFable.DataFormat.stringGetSegments(_MockFable.DataFormat.stringGetEnclosureValueByIndex(tmpSubObjectName.substring(tmpFunctionAddress.length), 0), ',');\n\t\t\t\tif ((tmpFunctionArguments.length == 0) || (tmpFunctionArguments[0] == ''))\n\t\t\t\t{\n\t\t\t\t\t// No arguments... just call the function (bound to the scope of the object it is contained withing)\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpFunctionAddress].apply(pObject), tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet tmpArgumentValues = [];\n\n\t\t\t\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t\t\t\t// Now get the value for each argument\n\t\t\t\t\tfor (let i = 0; i < tmpFunctionArguments.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Resolve the values for each subsequent entry\n\t\t\t\t\t\t// Check if the argument value is a string literal or a reference to an address\n\t\t\t\t\t\tif ((tmpFunctionArguments[i].length >= 2)\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(0) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"`\"))\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"`\")))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a string literal\n\t\t\t\t\t\t\ttmpArgumentValues.push(tmpFunctionArguments[i].substring(1, tmpFunctionArguments[i].length-1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a hash address\n\t\t\t\t\t\t\ttmpArgumentValues.push(this.getValueAtAddress(tmpRootObject, tmpFunctionArguments[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues), tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\t// Check if the boxed property is an object.\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the array and grab the addresses from there.\n\t\t\t\tlet tmpArrayProperty = pObject[tmpBoxedPropertyName];\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpBoxedPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpArrayProperty.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}[${i}]`;\n\t\t\t\t\tlet tmpValue = this.getValueAtAddress(pObject[tmpBoxedPropertyName][i], tmpNewAddress, tmpPropertyParentAddress, tmpRootObject);\n\n\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// OBJECT SET\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\t\t\tif (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the Object and grab the addresses from there.\n\t\t\t\tlet tmpObjectProperty = pObject[tmpObjectPropertyName];\n\t\t\t\tlet tmpObjectPropertyKeys = Object.keys(tmpObjectProperty);\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpObjectPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpObjectPropertyKeys.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}.${tmpObjectPropertyKeys[i]}`;\n\t\t\t\t\tlet tmpValue = this.getValueAtAddress(pObject[tmpObjectPropertyName][tmpObjectPropertyKeys[i]], tmpNewAddress, tmpPropertyParentAddress, tmpRootObject);\n\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpValue);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\treturn this.getValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.getValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressResolverGetValue;\n},{\"../source/Manyfest-ParseConditionals.js\":12,\"./Manyfest-CleanWrapCharacters.js\":3,\"./Manyfest-LogToConsole.js\":5,\"./Manyfest-ObjectAddress-Parser.js\":9}],9:[function(require,module,exports){\n// TODO: This is an inelegant solution to delay the rewrite of Manyfest.\n\n// Fable 3.0 has a service for data formatting that deals well with nested enclosures.\n\n// The Manyfest library predates fable 3.0 and the services structure of it, so the functions\n// are more or less pure javascript and as functional as they can be made to be.\n\n// Until we shift Manyfest to be a fable service, these three functions were pulled out of\n// fable to aid in parsing functions with nested enclosures.\n\nmodule.exports = {\n\t/**\n\t * Count the number of segments in a string, respecting enclosures\n\t * \n\t * @param {string} pString \n\t * @param {string} pSeparator \n\t * @param {object} pEnclosureStartSymbolMap \n\t * @param {object} pEnclosureEndSymbolMap \n\t * @returns the count of segments in the string as a number\n\t */\n\tstringCountSegments: (pString, pSeparator, pEnclosureStartSymbolMap, pEnclosureEndSymbolMap) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\n\t\tlet tmpSeparator = (typeof(pSeparator) == 'string') ? pSeparator : '.';\n\n\t\tlet tmpEnclosureStartSymbolMap = (typeof(pEnclosureStartSymbolMap) == 'object') ? pEnclosureStart : { '{': 0, '[': 1, '(': 2 };\n\t\tlet tmpEnclosureEndSymbolMap = (typeof(pEnclosureEndSymbolMap) == 'object') ? pEnclosureEnd : { '}': 0, ']': 1, ')': 2 };\n\n\t\tif (pString.length < 1)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet tmpSegmentCount = 1;\n\t\tlet tmpEnclosureStack = [];\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// IF This is the start of a segment\n\t\t\tif ((tmpString[i] == tmpSeparator)\n\t\t\t\t// AND we are not in a nested portion of the string\n\t\t\t\t&& (tmpEnclosureStack.length == 0))\n\t\t\t{\n\t\t\t\t// Increment the segment count\n\t\t\t\ttmpSegmentCount++;\n\t\t\t}\n\t\t\t// IF This is the start of an enclosure\n\t\t\telse if (tmpString[i] in tmpEnclosureStartSymbolMap)\n\t\t\t{\n\t\t\t\t// Add it to the stack!\n\t\t\t\ttmpEnclosureStack.push(tmpEnclosureStartSymbolMap[tmpString[i]]);\n\t\t\t}\n\t\t\t// IF This is the end of an enclosure\n\t\t\telse if ((tmpString[i] in tmpEnclosureEndSymbolMap)\n\t\t\t\t// AND it matches the current nest level symbol\n\t\t\t\t&& tmpEnclosureEndSymbolMap[tmpString[i]] == tmpEnclosureStack[tmpEnclosureStack.length - 1])\n\t\t\t{\n\t\t\t\t// Pop it off the stack!\n\t\t\t\ttmpEnclosureStack.pop();\n\t\t\t}\n\t\t}\n\n\t\treturn tmpSegmentCount;\n\t},\n\n\t/**\n\t * Get the first segment in a string, respecting enclosures\n\t * \n\t * @param {string} pString \n\t * @param {string} pSeparator \n\t * @param {object} pEnclosureStartSymbolMap \n\t * @param {object} pEnclosureEndSymbolMap \n\t * @returns the first segment in the string as a string\n\t */\n\tstringGetFirstSegment: (pString, pSeparator, pEnclosureStartSymbolMap, pEnclosureEndSymbolMap) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\n\t\tlet tmpSeparator = (typeof(pSeparator) == 'string') ? pSeparator : '.';\n\n\t\tlet tmpEnclosureStartSymbolMap = (typeof(pEnclosureStartSymbolMap) == 'object') ? pEnclosureStart : { '{': 0, '[': 1, '(': 2 };\n\t\tlet tmpEnclosureEndSymbolMap = (typeof(pEnclosureEndSymbolMap) == 'object') ? pEnclosureEnd : { '}': 0, ']': 1, ')': 2 };\n\n\t\tif (pString.length < 1)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet tmpEnclosureStack = [];\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// IF This is the start of a segment\n\t\t\tif ((tmpString[i] == tmpSeparator)\n\t\t\t\t// AND we are not in a nested portion of the string\n\t\t\t\t&& (tmpEnclosureStack.length == 0))\n\t\t\t{\n\t\t\t\t// Return the segment\n\t\t\t\treturn tmpString.substring(0, i);\n\t\t\t}\n\t\t\t// IF This is the start of an enclosure\n\t\t\telse if (tmpString[i] in tmpEnclosureStartSymbolMap)\n\t\t\t{\n\t\t\t\t// Add it to the stack!\n\t\t\t\ttmpEnclosureStack.push(tmpEnclosureStartSymbolMap[tmpString[i]]);\n\t\t\t}\n\t\t\t// IF This is the end of an enclosure\n\t\t\telse if ((tmpString[i] in tmpEnclosureEndSymbolMap)\n\t\t\t\t// AND it matches the current nest level symbol\n\t\t\t\t&& tmpEnclosureEndSymbolMap[tmpString[i]] == tmpEnclosureStack[tmpEnclosureStack.length - 1])\n\t\t\t{\n\t\t\t\t// Pop it off the stack!\n\t\t\t\ttmpEnclosureStack.pop();\n\t\t\t}\n\t\t}\n\n\t\treturn tmpString;\n\t},\n\n\t/**\n\t * Get all segments in a string, respecting enclosures\n\t * \n\t * @param {string} pString \n\t * @param {string} pSeparator \n\t * @param {object} pEnclosureStartSymbolMap \n\t * @param {object} pEnclosureEndSymbolMap \n\t * @returns the first segment in the string as a string\n\t */\n\tstringGetSegments: (pString, pSeparator, pEnclosureStartSymbolMap, pEnclosureEndSymbolMap)=>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\n\t\tlet tmpSeparator = (typeof(pSeparator) == 'string') ? pSeparator : '.';\n\n\t\tlet tmpEnclosureStartSymbolMap = (typeof(pEnclosureStartSymbolMap) == 'object') ? pEnclosureStart : { '{': 0, '[': 1, '(': 2 };\n\t\tlet tmpEnclosureEndSymbolMap = (typeof(pEnclosureEndSymbolMap) == 'object') ? pEnclosureEnd : { '}': 0, ']': 1, ')': 2 };\n\n\t\tlet tmpCurrentSegmentStart = 0;\n\t\tlet tmpSegmentList = [];\n\n\t\tif (pString.length < 1)\n\t\t{\n\t\t\treturn tmpSegmentList;\n\t\t}\n\n\t\tlet tmpEnclosureStack = [];\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// IF This is the start of a segment\n\t\t\tif ((tmpString[i] == tmpSeparator)\n\t\t\t\t// AND we are not in a nested portion of the string\n\t\t\t\t&& (tmpEnclosureStack.length == 0))\n\t\t\t{\n\t\t\t\t// Return the segment\n\t\t\t\ttmpSegmentList.push(tmpString.substring(tmpCurrentSegmentStart, i));\n\t\t\t\ttmpCurrentSegmentStart = i+1;\n\t\t\t}\n\t\t\t// IF This is the start of an enclosure\n\t\t\telse if (tmpString[i] in tmpEnclosureStartSymbolMap)\n\t\t\t{\n\t\t\t\t// Add it to the stack!\n\t\t\t\ttmpEnclosureStack.push(tmpEnclosureStartSymbolMap[tmpString[i]]);\n\t\t\t}\n\t\t\t// IF This is the end of an enclosure\n\t\t\telse if ((tmpString[i] in tmpEnclosureEndSymbolMap)\n\t\t\t\t// AND it matches the current nest level symbol\n\t\t\t\t&& tmpEnclosureEndSymbolMap[tmpString[i]] == tmpEnclosureStack[tmpEnclosureStack.length - 1])\n\t\t\t{\n\t\t\t\t// Pop it off the stack!\n\t\t\t\ttmpEnclosureStack.pop();\n\t\t\t}\n\t\t}\n\n\t\tif (tmpCurrentSegmentStart < tmpString.length)\n\t\t{\n\t\t\ttmpSegmentList.push(tmpString.substring(tmpCurrentSegmentStart));\n\t\t}\n\n\t\treturn tmpSegmentList;\n\t},\n\n\t/**\n\t * Count the number of enclosures in a string based on the start and end characters.\n\t *\n\t * If no start or end characters are specified, it will default to parentheses.  If the string is not a string, it will return 0.\n\t *\n\t * @param {string} pString\n\t * @param {string} pEnclosureStart\n\t * @param {string} pEnclosureEnd\n\t * @returns the count of full in the string\n\t */\n\tstringCountEnclosures: (pString, pEnclosureStart, pEnclosureEnd) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\t\tlet tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t\tlet tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t\tlet tmpEnclosureCount = 0;\n\t\tlet tmpEnclosureDepth = 0;\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// This is the start of an enclosure\n\t\t\tif (tmpString[i] == tmpEnclosureStart)\n\t\t\t{\n\t\t\t\tif (tmpEnclosureDepth == 0)\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureCount++;\n\t\t\t\t}\n\t\t\t\ttmpEnclosureDepth++;\n\t\t\t}\n\t\t\telse if (tmpString[i] == tmpEnclosureEnd)\n\t\t\t{\n\t\t\t\ttmpEnclosureDepth--;\n\t\t\t}\n\t\t}\n\n\t\treturn tmpEnclosureCount;\n\t},\n\n\n\t/**\n\t * Get the value of the enclosure at the specified index.\n\t *\n\t * If the index is not a number, it will default to 0.  If the string is not a string, it will return an empty string.  If the enclosure is not found, it will return an empty string.  If the enclosure\n\t *\n\t * @param {string} pString\n\t * @param {number} pEnclosureIndexToGet\n\t * @param {string} pEnclosureStart\n\t * @param {string}} pEnclosureEnd\n\t * @returns {string}\n\t */\n\tstringGetEnclosureValueByIndex: (pString, pEnclosureIndexToGet, pEnclosureStart, pEnclosureEnd) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\t\tlet tmpEnclosureIndexToGet = (typeof(pEnclosureIndexToGet) == 'number') ? pEnclosureIndexToGet : 0;\n\t\tlet tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t\tlet tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t\tlet tmpEnclosureCount = 0;\n\t\tlet tmpEnclosureDepth = 0;\n\n\t\tlet tmpMatchedEnclosureIndex = false;\n\t\tlet tmpEnclosedValueStartIndex = 0;\n\t\tlet tmpEnclosedValueEndIndex = 0;\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// This is the start of an enclosure\n\t\t\tif (tmpString[i] == tmpEnclosureStart)\n\t\t\t{\n\t\t\t\ttmpEnclosureDepth++;\n\n\t\t\t\t// Only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif (tmpEnclosureDepth == 1)\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureCount++;\n\t\t\t\t\tif (tmpEnclosureIndexToGet == (tmpEnclosureCount - 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// This is the start of *the* enclosure\n\t\t\t\t\t\ttmpMatchedEnclosureIndex = true;\n\t\t\t\t\t\ttmpEnclosedValueStartIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This is the end of an enclosure\n\t\t\telse if (tmpString[i] == tmpEnclosureEnd)\n\t\t\t{\n\t\t\t\ttmpEnclosureDepth--;\n\n\t\t\t\t// Again, only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif ((tmpEnclosureDepth == 0) &&\n\t\t\t\t\ttmpMatchedEnclosureIndex &&\n\t\t\t\t\t(tmpEnclosedValueEndIndex <= tmpEnclosedValueStartIndex))\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosedValueEndIndex = i;\n\t\t\t\t\ttmpMatchedEnclosureIndex = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (tmpEnclosureCount <= tmpEnclosureIndexToGet)\n\t\t{\n\t\t\t// Return an empty string if the enclosure is not found\n\t\t\treturn '';\n\t\t}\n\n\t\tif ((tmpEnclosedValueEndIndex > 0) && (tmpEnclosedValueEndIndex > tmpEnclosedValueStartIndex))\n\t\t{\n\t\t\treturn tmpString.substring(tmpEnclosedValueStartIndex+1, tmpEnclosedValueEndIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpString.substring(tmpEnclosedValueStartIndex+1);\n\t\t}\n\t}\n}\n},{}],10:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\nlet fCleanWrapCharacters = require('./Manyfest-CleanWrapCharacters.js');\n\n/**\n* Object Address Resolver - SetValue\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n*\n* @class ManyfestObjectAddressSetValue\n*/\nclass ManyfestObjectAddressSetValue\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.cleanWrapCharacters = fCleanWrapCharacters;\n\t}\n\n\t// Set the value of an element at an address\n\tsetValueAtAddress (pObject, pAddress, pValue)\n\t{\n\t\t// Make sure pObject is an object\n\t\tif (typeof(pObject) != 'object') return false;\n\t\t// Make sure pAddress is a string\n\t\tif (typeof(pAddress) != 'string') return false;\n\n\t\tlet tmpSeparatorIndex = pAddress.indexOf('.');\n\n\t\tif (tmpSeparatorIndex == -1)\n\t\t{\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\t\t\t\tlet tmpIndexIsNumeric = !isNaN(tmpBoxedPropertyNumber);\n\n\t\t\t\tif (pObject[tmpBoxedPropertyName] == null)\n\t\t\t\t{\n\t\t\t\t\tif (tmpIndexIsNumeric)\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = [];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = {};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\tif (!(tmpBoxedPropertyReference in pObject[tmpBoxedPropertyName]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyReference] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return the value in the property\n\t\t\t\t\t//TODO: For cases where we have chained [][] properties, this needs to recurse somehow\n\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyReference] = pValue;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twhile(pObject[tmpBoxedPropertyName].length < (tmpBoxedPropertyNumber + 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber] = pValue;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Now is the time in recursion to set the value in the object\n\t\t\t\tpObject[pAddress] = pValue;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpSubObjectName = pAddress.substring(0, tmpSeparatorIndex);\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpSeparatorIndex+1);\n\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\t\t\t\tlet tmpIndexIsNumeric = !isNaN(tmpBoxedPropertyNumber);\n\n\t\t\t\t//if (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\tif (pObject[tmpBoxedPropertyName] == null)\n\t\t\t\t{\n\t\t\t\t\tif (tmpIndexIsNumeric)\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = [];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = {};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) != tmpIndexIsNumeric)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\tif (!(tmpBoxedPropertyReference in pObject[tmpBoxedPropertyName]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyReference] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.setValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, pValue);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twhile(pObject[tmpBoxedPropertyName].length < (tmpBoxedPropertyNumber + 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.setValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, pValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\tif (!('__ERROR' in pObject))\n\t\t\t\t\tpObject['__ERROR'] = {};\n\t\t\t\t// Put it in an error object so data isn't lost\n\t\t\t\tpObject['__ERROR'][pAddress] = pValue;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\treturn this.setValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, pValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.setValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, pValue);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressSetValue;\n},{\"./Manyfest-CleanWrapCharacters.js\":3,\"./Manyfest-LogToConsole.js\":5}],11:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\n/**\n* Object Address Generation\n*\n* Automagically generate addresses and properties based on a passed-in object,\n* to be used for easy creation of schemas.  Meant to simplify the lives of\n* developers wanting to create schemas without typing a bunch of stuff.\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n*\n* @class ManyfestObjectAddressGeneration\n*/\nclass ManyfestObjectAddressGeneration\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\t}\n\n\t// generateAddressses\n\t//\n\t// This flattens an object into a set of key:value pairs for *EVERY SINGLE\n\t// POSSIBLE ADDRESS* in the object.  It can get ... really insane really\n\t// quickly.  This is not meant to be used directly to generate schemas, but\n\t// instead as a starting point for scripts or UIs.\n\t//\n\t// This will return a mega set of key:value pairs with all possible schema\n\t// permutations and default values (when not an object) and everything else.\n\tgenerateAddressses (pObject, pBaseAddress, pSchema)\n\t{\n\t\tlet tmpBaseAddress = (typeof(pBaseAddress) == 'string') ? pBaseAddress : '';\n\t\tlet tmpSchema = (typeof(pSchema) == 'object') ? pSchema : {};\n\n\t\tlet tmpObjectType = typeof(pObject);\n\n\t\tlet tmpSchemaObjectEntry = (\n\t\t\t{\n\t\t\t\tAddress: tmpBaseAddress,\n\t\t\t\tHash: tmpBaseAddress,\n\t\t\t\tName: tmpBaseAddress,\n\t\t\t\t// This is so scripts and UI controls can force a developer to opt-in.\n\t\t\t\tInSchema: false\n\t\t\t}\n\t\t)\n\n\t\tif ((tmpObjectType == 'object') && (pObject == null))\n\t\t{\n\t\t\ttmpObjectType = 'null';\n\t\t}\n\n\t\tswitch(tmpObjectType)\n\t\t{\n\t\t\tcase 'string':\n\t\t\t\ttmpSchemaObjectEntry.DataType = 'String';\n\t\t\t\ttmpSchemaObjectEntry.Default = pObject;\n\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\tcase 'bigint':\n\t\t\t\ttmpSchemaObjectEntry.DataType = 'Number';\n\t\t\t\ttmpSchemaObjectEntry.Default = pObject;\n\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\tbreak;\n\t\t\tcase 'undefined':\n\t\t\tcase 'null':\n\t\t\t\ttmpSchemaObjectEntry.DataType = 'Any';\n\t\t\t\ttmpSchemaObjectEntry.Default = pObject;\n\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(pObject))\n\t\t\t\t{\n\t\t\t\t\ttmpSchemaObjectEntry.DataType = 'Array';\n\t\t\t\t\tif (tmpBaseAddress != '')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < pObject.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.generateAddressses(pObject[i], `${tmpBaseAddress}[${i}]`, tmpSchema);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmpSchemaObjectEntry.DataType = 'Object';\n\t\t\t\t\tif (tmpBaseAddress != '')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\t\t\ttmpBaseAddress += '.';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet tmpObjectProperties = Object.keys(pObject);\n\n\t\t\t\t\tfor (let i = 0; i < tmpObjectProperties.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.generateAddressses(pObject[tmpObjectProperties[i]], `${tmpBaseAddress}${tmpObjectProperties[i]}`, tmpSchema);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'symbol':\n\t\t\tcase 'function':\n\t\t\t\t// Symbols and functions neither recurse nor get added to the schema\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn tmpSchema;\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressGeneration;\n},{\"./Manyfest-LogToConsole.js\":5}],12:[function(require,module,exports){\n// Given a string, parse out any conditional expressions and set whether or not to keep the record.\n//\n// For instance:\n// \t\t'files[]<<~?format,==,Thumbnail?~>>'\n//      'files[]<<~?format,==,Metadata?~>>'\n//      'files[]<<~?size,>,4000?~>>'\n//\n// The wrapping parts are the <<~? and ?~>> megabrackets.\n//\n// The function does not need to alter the string -- just check the conditionals within.\n\n// TODO: Consider making this an es6 class\n\n// Let's use indexOf since it is apparently the fastest.\nconst _ConditionalStanzaStart = '<<~?';\nconst _ConditionalStanzaStartLength = _ConditionalStanzaStart.length;\nconst _ConditionalStanzaEnd = '?~>>';\nconst _ConditionalStanzaEndLength = _ConditionalStanzaEnd.length;\n\n// Ugh dependency injection.  Can't wait to make these all fable services.\n//let libObjectAddressCheckAddressExists = new (require('./Manyfest-ObjectAddress-CheckAddressExists.js'))();\n\n// Test the condition of a value in a record\nconst testCondition = (pManyfest, pRecord, pSearchAddress, pSearchComparator, pValue) =>\n{\n\tswitch(pSearchComparator)\n\t{\n\t\tcase 'TRUE':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) === true);\n\t\t\tbreak;\n\t\tcase 'FALSE':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) === false);\n\t\t\tbreak;\n\t\tcase 'LNGT':\n\t\tcase 'LENGTH_GREATER_THAN':\n\t\t\tswitch(typeof(pManyfest.getValueAtAddress(pRecord, pSearchAddress)))\n\t\t\t{\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length > pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length > pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'LNLT':\n\t\tcase 'LENGTH_LESS_THAN':\n\t\t\tswitch(typeof(pManyfest.getValueAtAddress(pRecord, pSearchAddress)))\n\t\t\t{\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length < pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length < pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t// TODO: Welcome to dependency hell.  This fixes itself when we move to fable services.\n\t\t// case 'EX':\n\t\t// case 'EXISTS':\n\t\t// \treturn libObjectAddressCheckAddressExists.checkAddressExists(pRecord, pSearchAddress);\n\t\t// \tbreak;\n\t\t// case 'DNEX':\n\t\t// case 'DOES_NOT_EXIST':\n\t\t// \treturn !libObjectAddressCheckAddressExists.checkAddressExists(pRecord, pSearchAddress);\n\t\t// \tbreak;\n\t\tcase '!=':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) != pValue);\n\t\t\tbreak;\n\t\tcase '<':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) < pValue);\n\t\t\tbreak;\n\t\tcase '>':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) > pValue);\n\t\t\tbreak;\n\t\tcase '<=':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) <= pValue);\n\t\t\tbreak;\n\t\tcase '>=':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) >= pValue);\n\t\t\tbreak;\n\t\tcase '===':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) === pValue);\n\t\t\tbreak;\n\t\tcase '==':\n\t\tdefault:\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) == pValue);\n\t\t\tbreak;\n\t}\n};\n\nconst parseConditionals = (pManyfest, pAddress, pRecord) =>\n{\n\tlet tmpKeepRecord = true;\n\n\t/*\n\t\tAlgorithm is simple:\n\n\t\t1.  Enuerate start points\n\t\t2.  Find stop points within each start point\n\t\t3. Check the conditional\n\t*/\n\tlet tmpStartIndex = pAddress.indexOf(_ConditionalStanzaStart);\n\n\twhile (tmpStartIndex != -1)\n\t{\n\t\tlet tmpStopIndex = pAddress.indexOf(_ConditionalStanzaEnd, tmpStartIndex+_ConditionalStanzaStartLength);\n\n\t\tif (tmpStopIndex != -1)\n\t\t{\n\t\t\tlet tmpMagicComparisonPatternSet = pAddress.substring(tmpStartIndex+_ConditionalStanzaStartLength, tmpStopIndex).split(',');\n\n\t\t\t// The address to search for\n\t\t\tlet tmpSearchAddress = tmpMagicComparisonPatternSet[0];\n\n\t\t\t// The copmparison expression (EXISTS as default)\n\t\t\tlet tmpSearchComparator = 'EXISTS';\n\t\t\tif (tmpMagicComparisonPatternSet.length > 1)\n\t\t\t{\n\t\t\t\ttmpSearchComparator = tmpMagicComparisonPatternSet[1];\t\t\t\t\n\t\t\t}\n\n\t\t\t// The value to search for\n\t\t\tlet tmpSearchValue = false;\n\t\t\tif (tmpMagicComparisonPatternSet.length > 2)\n\t\t\t{\n\t\t\t\ttmpSearchValue = tmpMagicComparisonPatternSet[2];\n\t\t\t}\n\n\t\t\t// Process the piece\n\t\t\ttmpKeepRecord = tmpKeepRecord && testCondition(pManyfest, pRecord, tmpSearchAddress, tmpSearchComparator, tmpSearchValue);\n\t\t\ttmpStartIndex = pAddress.indexOf(_ConditionalStanzaStart, tmpStopIndex+_ConditionalStanzaEndLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpStartIndex = -1;\n\t\t}\n\t\t\n\t}\n\n\treturn tmpKeepRecord;\n}\n\nmodule.exports = parseConditionals;\n},{}],13:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\n/**\n* Schema Manipulation Functions\n*\n* @class ManyfestSchemaManipulation\n*/\nclass ManyfestSchemaManipulation\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) === 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) === 'function') ? pErrorLog : libSimpleLog;\n\t}\n\n    // This translates the default address mappings to something different.\n    //\n    // For instance you can pass in manyfest schema descriptor object:\n    // \t{\n\t//\t  \"Address.Of.a\": { \"Hash\": \"a\", \"Type\": \"Number\" },\n\t//\t  \"Address.Of.b\": { \"Hash\": \"b\", \"Type\": \"Number\" }\n\t//  }\n    //\n    //\n    // And then an address mapping (basically a Hash->Address map)\n    //  {\n    //    \"a\": \"New.Address.Of.a\",\n    //    \"b\": \"New.Address.Of.b\"\n    //  }\n    //\n    // NOTE: This mutates the schema object permanently, altering the base hash.\n    //       If there is a collision with an existing address, it can lead to overwrites.\n    // TODO: Discuss what should happen on collisions.\n\tresolveAddressMappings(pManyfestSchemaDescriptors, pAddressMapping)\n\t{\n\t\tif (typeof(pManyfestSchemaDescriptors) != 'object')\n\t\t{\n\t\t\tthis.logError(`Attempted to resolve address mapping but the descriptor was not an object.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof(pAddressMapping) != 'object')\n\t\t{\n\t\t\t// No mappings were passed in\n\t\t\treturn true;\n\t\t}\n\n\t\t// Get the arrays of both the schema definition and the hash mapping\n\t\tlet tmpManyfestAddresses = Object.keys(pManyfestSchemaDescriptors);\n\t\tlet tmpHashMapping = {};\n\t\ttmpManyfestAddresses.forEach(\n\t\t\t(pAddress) =>\n\t\t\t{\n\t\t\t\tif ('Hash' in pManyfestSchemaDescriptors[pAddress])\n\t\t\t\t{\n\t\t\t\t\ttmpHashMapping[pManyfestSchemaDescriptors[pAddress].Hash] = pAddress;\n\t\t\t\t}\n\t\t\t});\n\n\t\tlet tmpAddressMappingSet = Object.keys(pAddressMapping);\n\n\t\ttmpAddressMappingSet.forEach(\n\t\t\t(pInputAddress) =>\n\t\t\t{\n\t\t\t\tlet tmpNewDescriptorAddress = pAddressMapping[pInputAddress];\n\t\t\t\tlet tmpOldDescriptorAddress = false;\n\t\t\t\tlet tmpDescriptor = false;\n\n\t\t\t\t// See if there is a matching descriptor either by Address directly or Hash\n\t\t\t\tif (pInputAddress in pManyfestSchemaDescriptors)\n\t\t\t\t{\n\t\t\t\t\ttmpOldDescriptorAddress = pInputAddress;\n\t\t\t\t}\n\t\t\t\telse if (pInputAddress in tmpHashMapping)\n\t\t\t\t{\n\t\t\t\t\ttmpOldDescriptorAddress = tmpHashMapping[pInputAddress];\n\t\t\t\t}\n\n\t\t\t\t// If there was a matching descriptor in the manifest, store it in the temporary descriptor\n\t\t\t\tif (tmpOldDescriptorAddress)\n\t\t\t\t{\n\t\t\t\t\ttmpDescriptor = pManyfestSchemaDescriptors[tmpOldDescriptorAddress];\n\t\t\t\t\tdelete pManyfestSchemaDescriptors[tmpOldDescriptorAddress];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Create a new descriptor!  Map it to the input address.\n\t\t\t\t\ttmpDescriptor = { Hash:pInputAddress };\n\t\t\t\t}\n\n\t\t\t\t// Now re-add the descriptor to the manyfest schema\n\t\t\t\tpManyfestSchemaDescriptors[tmpNewDescriptorAddress] = tmpDescriptor;\n\t\t\t});\n\n\t\treturn true;\n\t}\n\n\tsafeResolveAddressMappings(pManyfestSchemaDescriptors, pAddressMapping)\n\t{\n\t\t// This returns the descriptors as a new object, safely remapping without mutating the original schema Descriptors\n\t\tlet tmpManyfestSchemaDescriptors = JSON.parse(JSON.stringify(pManyfestSchemaDescriptors));\n\t\tthis.resolveAddressMappings(tmpManyfestSchemaDescriptors, pAddressMapping);\n\t\treturn tmpManyfestSchemaDescriptors;\n\t}\n\n\tmergeAddressMappings(pManyfestSchemaDescriptorsDestination, pManyfestSchemaDescriptorsSource)\n\t{\n\t\tif ((typeof(pManyfestSchemaDescriptorsSource) != 'object') || (typeof(pManyfestSchemaDescriptorsDestination) != 'object'))\n\t\t{\n\t\t\tthis.logError(`Attempted to merge two schema descriptors but both were not objects.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpSource = JSON.parse(JSON.stringify(pManyfestSchemaDescriptorsSource));\n\t\tlet tmpNewManyfestSchemaDescriptors = JSON.parse(JSON.stringify(pManyfestSchemaDescriptorsDestination));\n\n\t\t// The first passed-in set of descriptors takes precedence.\n\t\tlet tmpDescriptorAddresses = Object.keys(tmpSource);\n\n\t\ttmpDescriptorAddresses.forEach(\n\t\t\t(pDescriptorAddress) =>\n\t\t\t{\n\t\t\t\tif (!(pDescriptorAddress in tmpNewManyfestSchemaDescriptors))\n\t\t\t\t{\n\t\t\t\t\ttmpNewManyfestSchemaDescriptors[pDescriptorAddress] = tmpSource[pDescriptorAddress];\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn tmpNewManyfestSchemaDescriptors;\n\t}\n}\n\nmodule.exports = ManyfestSchemaManipulation;\n},{\"./Manyfest-LogToConsole.js\":5}],14:[function(require,module,exports){\n/**\n* @author <steven@velozo.com>\n*/\nconst libFableServiceProviderBase = require('fable-serviceproviderbase');\n\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\nlet libHashTranslation = require('./Manyfest-HashTranslation.js');\nlet libObjectAddressCheckAddressExists = require('./Manyfest-ObjectAddress-CheckAddressExists.js');\nlet libObjectAddressGetValue = require('./Manyfest-ObjectAddress-GetValue.js');\nlet libObjectAddressSetValue = require('./Manyfest-ObjectAddress-SetValue.js');\nlet libObjectAddressDeleteValue = require('./Manyfest-ObjectAddress-DeleteValue.js');\nlet libObjectAddressGeneration = require('./Manyfest-ObjectAddressGeneration.js');\nlet libSchemaManipulation = require('./Manyfest-SchemaManipulation.js');\n\nconst _DefaultConfiguration = { Scope:'DEFAULT', Descriptors: {} }\n\n/**\n * @typedef {{\n *   Hash?: string,\n *   Name?: string,\n *   DataType?: string,\n *   Required?: boolean,\n *   Address?: string,\n *   Description?: string,\n *   [key: string]: any,\n * }} ManifestDescriptor\n */\n\n/**\n* Manyfest object address-based descriptions and manipulations.\n*\n* @class Manyfest\n*/\nclass Manyfest extends libFableServiceProviderBase\n{\n\tconstructor(pFable, pManifest, pServiceHash)\n\t{\n\t\tif (pFable === undefined)\n\t\t{\n\t\t\tsuper({});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsuper(pFable, pManifest, pServiceHash);\n\t\t}\n\n\t\t/** @type {Record<string, any>} */\n\t\tthis.options;\n\n        this.serviceType = 'Manifest';\n\n\t\t// Wire in logging\n\t\tthis.logInfo = libSimpleLog;\n\t\tthis.logError = libSimpleLog;\n\n\t\t// Create an object address resolver and map in the functions\n\t\tthis.objectAddressCheckAddressExists = new libObjectAddressCheckAddressExists(this.logInfo, this.logError);\n\t\tthis.objectAddressGetValue = new libObjectAddressGetValue(this.logInfo, this.logError);\n\t\tthis.objectAddressSetValue = new libObjectAddressSetValue(this.logInfo, this.logError);\n\t\tthis.objectAddressDeleteValue = new libObjectAddressDeleteValue(this.logInfo, this.logError);\n\n\t\tif (!('defaultValues' in this.options))\n\t\t{\n\t\t\tthis.options.defaultValues = (\n\t\t\t\t{\n\t\t\t\t\t\"String\": \"\",\n\t\t\t\t\t\"Number\": 0,\n\t\t\t\t\t\"Float\": 0.0,\n\t\t\t\t\t\"Integer\": 0,\n\t\t\t\t\t\"PreciseNumber\": \"0.0\",\n\t\t\t\t\t\"Boolean\": false,\n\t\t\t\t\t\"Binary\": 0,\n\t\t\t\t\t\"DateTime\": 0,\n\t\t\t\t\t\"Array\": [],\n\t\t\t\t\t\"Object\": {},\n\t\t\t\t\t\"Null\": null\n\t\t\t\t});\n\t\t}\n\t\tif (!('strict' in this.options))\n\t\t{\n\t\t\tthis.options.strict = false;\n\t\t}\n\n\t\tthis.scope = undefined;\n\t\tthis.elementAddresses = undefined;\n\t\tthis.elementHashes = undefined;\n\t\tthis.elementDescriptors = undefined;\n\n\t\tthis.reset();\n\n\t\tif (typeof(this.options) === 'object')\n\t\t{\n\t\t\tthis.loadManifest(this.options);\n\t\t}\n\n\t\tthis.schemaManipulations = new libSchemaManipulation(this.logInfo, this.logError);\n\t\tthis.objectAddressGeneration = new libObjectAddressGeneration(this.logInfo, this.logError);\n\n\t\tthis.hashTranslations = new libHashTranslation(this.logInfo, this.logError);\n\n\t\tthis.numberRegex = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$/;\n\t}\n\n\t/*************************************************************************\n\t * Schema Manifest Loading, Reading, Manipulation and Serialization Functions\n\t */\n\n\t// Reset critical manifest properties\n\treset()\n\t{\n\t\tthis.scope = 'DEFAULT';\n\t\tthis.elementAddresses = [];\n\t\tthis.elementHashes = {};\n\t\tthis.elementDescriptors = {};\n\t}\n\n\tclone()\n\t{\n\t\t// Make a copy of the options in-place\n\t\tlet tmpNewOptions = JSON.parse(JSON.stringify(this.options));\n\n\t\tlet tmpNewManyfest = new Manyfest(this.getManifest(), this.logInfo, this.logError, tmpNewOptions);\n\n\t\t// Import the hash translations\n\t\ttmpNewManyfest.hashTranslations.addTranslation(this.hashTranslations.translationTable);\n\n\t\treturn tmpNewManyfest;\n\t}\n\n\t// Deserialize a Manifest from a string\n\tdeserialize(pManifestString)\n\t{\n\t\t// TODO: Add guards for bad manifest string\n\t\treturn this.loadManifest(JSON.parse(pManifestString));\n\t}\n\n\t// Load a manifest from an object\n\tloadManifest(pManifest)\n\t{\n\t\tif (typeof(pManifest) !== 'object')\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading manifest; expecting an object but parameter was type ${typeof(pManifest)}.`);\n\t\t}\n\n\t\tlet tmpManifest = (typeof(pManifest) == 'object') ? pManifest : {};\n\n\t\tlet tmpDescriptorKeys = Object.keys(_DefaultConfiguration);\n\n\t\tfor (let i = 0; i < tmpDescriptorKeys.length; i++)\n\t\t{\n\t\t\tif (!(tmpDescriptorKeys[i] in tmpManifest))\n\t\t\t{\n\t\t\t\ttmpManifest[tmpDescriptorKeys[i]] = JSON.parse(JSON.stringify(_DefaultConfiguration[tmpDescriptorKeys[i]]));\n\t\t\t}\n\t\t}\n\n\t\tif ('Scope' in tmpManifest)\n\t\t{\n\t\t\tif (typeof(tmpManifest.Scope) === 'string')\n\t\t\t{\n\t\t\t\tthis.scope = tmpManifest.Scope;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.logError(`(${this.scope}) Error loading scope from manifest; expecting a string but property was type ${typeof(tmpManifest.Scope)}.`, tmpManifest);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading scope from manifest object.  Property \"Scope\" does not exist in the root of the object.`, tmpManifest);\n\t\t}\n\n\t\tif ('Descriptors' in tmpManifest)\n\t\t{\n\t\t\tif (typeof(tmpManifest.Descriptors) === 'object')\n\t\t\t{\n\t\t\t\tlet tmpDescriptionAddresses = Object.keys(tmpManifest.Descriptors);\n\t\t\t\tfor (let i = 0; i < tmpDescriptionAddresses.length; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.addDescriptor(tmpDescriptionAddresses[i], tmpManifest.Descriptors[tmpDescriptionAddresses[i]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.logError(`(${this.scope}) Error loading description object from manifest object.  Expecting an object in 'Manifest.Descriptors' but the property was type ${typeof(tmpManifest.Descriptors)}.`, tmpManifest);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading object description from manifest object.  Property \"Descriptors\" does not exist in the root of the Manifest object.`, tmpManifest);\n\t\t}\n\n\t\tif ('HashTranslations' in tmpManifest)\n\t\t{\n\t\t\tif (typeof(tmpManifest.HashTranslations) === 'object')\n\t\t\t{\n\t\t\t\tfor (let i = 0; i < tmpManifest.HashTranslations.length; i++)\n\t\t\t\t{\n\t\t\t\t\t// Each translation is \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Serialize the Manifest to a string\n\tserialize()\n\t{\n\t\treturn JSON.stringify(this.getManifest());\n\t}\n\n\tgetManifest()\n\t{\n\t\treturn (\n\t\t\t{\n\t\t\t\tScope: this.scope,\n\t\t\t\tDescriptors: JSON.parse(JSON.stringify(this.elementDescriptors)),\n\t\t\t\tHashTranslations: JSON.parse(JSON.stringify(this.hashTranslations.translationTable))\n\t\t\t});\n\t}\n\n\t/**\n\t * Add a descriptor to the manifest\n\t *\n\t * @param {string} pAddress - The address of the element to add the descriptor for.\n\t * @param {ManifestDescriptor} pDescriptor - The descriptor object to add.\n\t */\n\taddDescriptor(pAddress, pDescriptor)\n\t{\n\t\tif (typeof(pDescriptor) === 'object')\n\t\t{\n\t\t\t// Add the Address into the Descriptor if it doesn't exist:\n\t\t\tif (!('Address' in pDescriptor))\n\t\t\t{\n\t\t\t\tpDescriptor.Address = pAddress;\n\t\t\t}\n\n\t\t\tif (!(pAddress in this.elementDescriptors))\n\t\t\t{\n\t\t\t\tthis.elementAddresses.push(pAddress);\n\t\t\t}\n\n\t\t\t// Add the element descriptor to the schema\n\t\t\tthis.elementDescriptors[pAddress] = pDescriptor;\n\n\t\t\t// Always add the address as a hash\n\t\t\tthis.elementHashes[pAddress] = pAddress;\n\n\t\t\tif ('Hash' in pDescriptor)\n\t\t\t{\n\t\t\t\t// TODO: Check if this is a good idea or not..\n\t\t\t\t//       Collisions are bound to happen with both representations of the address/hash in here and developers being able to create their own hashes.\n\t\t\t\tthis.elementHashes[pDescriptor.Hash] = pAddress;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpDescriptor.Hash = pAddress;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading object descriptor for address '${pAddress}' from manifest object.  Expecting an object but property was type ${typeof(pDescriptor)}.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} pHash - The hash of the address to resolve.\n\t *\n\t * @return {ManifestDescriptor} The descriptor for the address\n\t */\n\tgetDescriptorByHash(pHash)\n\t{\n\t\treturn this.getDescriptor(this.resolveHashAddress(pHash));\n\t}\n\n\t/**\n\t * @param {string} pAddress - The address of the element to get the descriptor for.\n\t *\n\t * @return {ManifestDescriptor} The descriptor for the address\n\t */\n\tgetDescriptor(pAddress)\n\t{\n\t\treturn this.elementDescriptors[pAddress];\n\t}\n\n\t/**\n\t * execute an action function for each descriptor\n\t * @param {(d: ManifestDescriptor) => void} fAction - The action function to execute for each descriptor.\n\t */\n\teachDescriptor(fAction)\n\t{\n        let tmpDescriptorAddresses = Object.keys(this.elementDescriptors);\n        for (let i = 0; i < tmpDescriptorAddresses.length; i++)\n        {\n            fAction(this.elementDescriptors[tmpDescriptorAddresses[i]]);\n        }\n\n\t}\n\n\t/*************************************************************************\n\t * Beginning of Object Manipulation (read & write) Functions\n\t */\n\t// Check if an element exists by its hash\n\tcheckAddressExistsByHash (pObject, pHash)\n\t{\n\t\treturn this.checkAddressExists(pObject,this.resolveHashAddress(pHash));\n\t}\n\n\t// Check if an element exists at an address\n\tcheckAddressExists (pObject, pAddress)\n\t{\n\t\treturn this.objectAddressCheckAddressExists.checkAddressExists(pObject, pAddress);\n\t}\n\n\t// Turn a hash into an address, factoring in the translation table.\n\tresolveHashAddress(pHash)\n\t{\n\t\tlet tmpAddress = undefined;\n\n\t\tlet tmpInElementHashTable = (pHash in this.elementHashes);\n\t\tlet tmpInTranslationTable = (pHash in this.hashTranslations.translationTable);\n\n\t\t// The most straightforward: the hash exists, no translations.\n\t\tif (tmpInElementHashTable && !tmpInTranslationTable)\n\t\t{\n\t\t\ttmpAddress = this.elementHashes[pHash];\n\t\t}\n\t\t// There is a translation from one hash to another, and, the elementHashes contains the pointer end\n\t\telse if (tmpInTranslationTable && (this.hashTranslations.translate(pHash) in this.elementHashes))\n\t\t{\n\t\t\ttmpAddress = this.elementHashes[this.hashTranslations.translate(pHash)];\n\t\t}\n\t\t// Use the level of indirection only in the Translation Table\n\t\telse if (tmpInTranslationTable)\n\t\t{\n\t\t\ttmpAddress = this.hashTranslations.translate(pHash);\n\t\t}\n\t\t// Just treat the hash as an address.\n\t\t// TODO: Discuss this ... it is magic but controversial\n\t\telse\n\t\t{\n\t\t\ttmpAddress = pHash;\n\t\t}\n\n\t\treturn tmpAddress;\n\t}\n\n\t// Get the value of an element by its hash\n\tgetValueByHash (pObject, pHash)\n\t{\n\t\tlet tmpValue = this.getValueAtAddress(pObject, this.resolveHashAddress(pHash));\n\n\t\tif (typeof(tmpValue) == 'undefined')\n\t\t{\n\t\t\t// Try to get a default if it exists\n\t\t\ttmpValue = this.getDefaultValue(this.getDescriptorByHash(pHash));\n\t\t}\n\n\t\treturn tmpValue;\n\t}\n\n\tlintAddress(pAddress)\n\t{\n\t\tlet tmpLintedAddress = pAddress.trim();\n\t\t// Check for a single . (but not a ..) at the end of the address and remove it.\n\t\tif (tmpLintedAddress.endsWith('..'))\n\t\t{\n\t\t\ttmpLintedAddress = tmpLintedAddress.slice(0, -1);\n\t\t}\n\t\telse if (tmpLintedAddress.endsWith('.'))\n\t\t{\n\t\t\ttmpLintedAddress = tmpLintedAddress.slice(0, -1);\n\t\t}\n\n\t\treturn tmpLintedAddress;\n\t}\n\n\t// Get the value of an element at an address\n\tgetValueAtAddress (pObject, pAddress)\n\t{\n\t\tlet tmpLintedAddress = this.lintAddress(pAddress);\n\t\tif (tmpLintedAddress == '')\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error getting value at address; address is an empty string.`, pObject);\n\t\t\treturn undefined;\n\t\t}\n\t\tlet tmpValue = this.objectAddressGetValue.getValueAtAddress(pObject, tmpLintedAddress);\n\n\t\tif (typeof(tmpValue) == 'undefined')\n\t\t{\n\t\t\t// Try to get a default if it exists\n\t\t\ttmpValue = this.getDefaultValue(this.getDescriptor(tmpLintedAddress));\n\t\t}\n\n\t\treturn tmpValue;\n\t}\n\n\t// Set the value of an element by its hash\n\tsetValueByHash(pObject, pHash, pValue)\n\t{\n\t\treturn this.setValueAtAddress(pObject, this.resolveHashAddress(pHash), pValue);\n\t}\n\n\t// Set the value of an element at an address\n\tsetValueAtAddress (pObject, pAddress, pValue)\n\t{\n\t\tlet tmpLintedAddress = this.lintAddress(pAddress);\n\t\treturn this.objectAddressSetValue.setValueAtAddress(pObject, tmpLintedAddress, pValue);\n\t}\n\n\t// Delete the value of an element by its hash\n\tdeleteValueByHash(pObject, pHash, pValue)\n\t{\n\t\treturn this.deleteValueAtAddress(pObject, this.resolveHashAddress(pHash), pValue);\n\t}\n\n\t// Delete the value of an element at an address\n\tdeleteValueAtAddress (pObject, pAddress, pValue)\n\t{\n\t\tlet tmpLintedAddress = this.lintAddress(pAddress);\n\t\treturn this.objectAddressDeleteValue.deleteValueAtAddress(pObject, tmpLintedAddress, pValue);\n\t}\n\n\t// Validate the consistency of an object against the schema\n\tvalidate(pObject)\n\t{\n\t\tlet tmpValidationData =\n\t\t{\n\t\t\tError: null,\n\t\t\tErrors: [],\n\t\t\tMissingElements:[]\n\t\t};\n\n\t\tif (typeof(pObject) !== 'object')\n\t\t{\n\t\t\ttmpValidationData.Error = true;\n\t\t\ttmpValidationData.Errors.push(`Expected passed in object to be type object but was passed in ${typeof(pObject)}`);\n\t\t}\n\n\t\tlet addValidationError = (pAddress, pErrorMessage) =>\n\t\t{\n\t\t\ttmpValidationData.Error = true;\n\t\t\ttmpValidationData.Errors.push(`Element at address \"${pAddress}\" ${pErrorMessage}.`);\n\t\t};\n\n\t\t// Now enumerate through the values and check for anomalies based on the schema\n\t\tfor (let i = 0; i < this.elementAddresses.length; i++)\n\t\t{\n\t\t\tlet tmpDescriptor = this.getDescriptor(this.elementAddresses[i]);\n\t\t\tlet tmpValueExists = this.checkAddressExists(pObject, tmpDescriptor.Address);\n\t\t\tlet tmpValue = this.getValueAtAddress(pObject, tmpDescriptor.Address);\n\n\t\t\tif ((typeof(tmpValue) == 'undefined') || !tmpValueExists)\n\t\t\t{\n\t\t\t\t// This will technically mean that `Object.Some.Value = undefined` will end up showing as \"missing\"\n\t\t\t\t// TODO: Do we want to do a different message based on if the property exists but is undefined?\n\t\t\t\ttmpValidationData.MissingElements.push(tmpDescriptor.Address);\n\t\t\t\tif (tmpDescriptor.Required || this.options.strict)\n\t\t\t\t{\n\t\t\t\t\taddValidationError(tmpDescriptor.Address, 'is flagged REQUIRED but is not set in the object');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Now see if there is a data type specified for this element\n\t\t\tif (tmpDescriptor.DataType)\n\t\t\t{\n\t\t\t\tlet tmpElementType = typeof(tmpValue);\n\t\t\t\tswitch(tmpDescriptor.DataType.toString().trim().toLowerCase())\n\t\t\t\t{\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tif (tmpElementType != 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"precisenumber\":\n\t\t\t\t\t\tif (tmpElementType != 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!this.numberRegex.test(tmpValue))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is not a valid number`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tif (tmpElementType != 'number')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tif (tmpElementType != 'number')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet tmpValueString = tmpValue.toString();\n\t\t\t\t\t\t\tif (tmpValueString.indexOf('.') > -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// TODO: Is this an error?\n\t\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but has a decimal point in the number.`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'float':\n\t\t\t\t\t\tif (tmpElementType != 'number')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'datetime':\n\t\t\t\t\t\tlet tmpValueDate = new Date(tmpValue);\n\t\t\t\t\t\tif (tmpValueDate.toString() == 'Invalid Date')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is not parsable as a Date by Javascript`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Check if this is a string, in the default case\n\t\t\t\t\t\t// Note this is only when a DataType is specified and it is an unrecognized data type.\n\t\t\t\t\t\tif (tmpElementType != 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} (which auto-converted to String because it was unrecognized) but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tmpValidationData;\n\t}\n\n\t/**\n\t * Returns a default value, or, the default value for the data type (which is overridable with configuration)\n\t *\n\t * @param {ManifestDescriptor} pDescriptor - The descriptor definition.\n\t */\n\tgetDefaultValue(pDescriptor)\n\t{\n\t\tif (typeof(pDescriptor) != 'object')\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ('Default' in pDescriptor)\n\t\t{\n\t\t\treturn pDescriptor.Default;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Default to a null if it doesn't have a type specified.\n\t\t\t// This will ensure a placeholder is created but isn't misinterpreted.\n\t\t\tlet tmpDataType = ('DataType' in pDescriptor) ? pDescriptor.DataType : 'String';\n\t\t\tif (tmpDataType in this.options.defaultValues)\n\t\t\t{\n\t\t\t\treturn this.options.defaultValues[tmpDataType];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// give up and return null\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Enumerate through the schema and populate default values if they don't exist.\n\tpopulateDefaults(pObject, pOverwriteProperties)\n\t{\n\t\treturn this.populateObject(pObject, pOverwriteProperties,\n\t\t\t// This just sets up a simple filter to see if there is a default set.\n\t\t\t(pDescriptor) =>\n\t\t\t{\n\t\t\t\treturn ('Default' in pDescriptor);\n\t\t\t});\n\t}\n\n\t// Forcefully populate all values even if they don't have defaults.\n\t// Based on type, this can do unexpected things.\n\tpopulateObject(pObject, pOverwriteProperties, fFilter)\n\t{\n\t\t// Automatically create an object if one isn't passed in.\n\t\tlet tmpObject = (typeof(pObject) === 'object') ? pObject : {};\n\t\t// Default to *NOT OVERWRITING* properties\n\t\tlet tmpOverwriteProperties = (typeof(pOverwriteProperties) == 'undefined') ? false : pOverwriteProperties;\n\t\t// This is a filter function, which is passed the schema and allows complex filtering of population\n\t\t// The default filter function just returns true, populating everything.\n\t\tlet tmpFilterFunction = (typeof(fFilter) == 'function') ? fFilter : (pDescriptor) => { return true; };\n\n\t\tthis.elementAddresses.forEach(\n\t\t\t(pAddress) =>\n\t\t\t{\n\t\t\t\tlet tmpDescriptor = this.getDescriptor(pAddress);\n\t\t\t\t// Check the filter function to see if this is an address we want to set the value for.\n\t\t\t\tif (tmpFilterFunction(tmpDescriptor))\n\t\t\t\t{\n\t\t\t\t\t// If we are overwriting properties OR the property does not exist\n\t\t\t\t\tif (tmpOverwriteProperties || !this.checkAddressExists(tmpObject, pAddress))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setValueAtAddress(tmpObject, pAddress, this.getDefaultValue(tmpDescriptor));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn tmpObject;\n\t}\n};\n\nmodule.exports = Manyfest;\n\n},{\"./Manyfest-HashTranslation.js\":4,\"./Manyfest-LogToConsole.js\":5,\"./Manyfest-ObjectAddress-CheckAddressExists.js\":6,\"./Manyfest-ObjectAddress-DeleteValue.js\":7,\"./Manyfest-ObjectAddress-GetValue.js\":8,\"./Manyfest-ObjectAddress-SetValue.js\":10,\"./Manyfest-ObjectAddressGeneration.js\":11,\"./Manyfest-SchemaManipulation.js\":13,\"fable-serviceproviderbase\":2}]},{},[14])(14)\n});\n\n","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","// When a boxed property is passed in, it should have quotes of some\n// kind around it.\n//\n// For instance:\n// \t\tMyValues['Name']\n// \t\tMyValues[\"Age\"]\n// \t\tMyValues[`Cost`]\n//\n// This function removes the wrapping quotes.\n//\n// Please note it *DOES NOT PARSE* template literals, so backticks just\n// end up doing the same thing as other quote types.\n//\n// TODO: Should template literals be processed?  If so what state do they have access to?  That should happen here if so.\n// TODO: Make a simple class include library with these\nconst cleanWrapCharacters = (pCharacter, pString) =>\n{\n\tif (pString.startsWith(pCharacter) && pString.endsWith(pCharacter))\n\t{\n\t\treturn pString.substring(1, pString.length - 1);\n\t}\n\telse\n\t{\n\t\treturn pString;\n\t}\n};\n\nmodule.exports = cleanWrapCharacters;","/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\n/**\n* Hash Translation\n*\n* This is a very simple translation table for hashes, which allows the same schema to resolve\n* differently based on a loaded translation table.\n*\n* This is to prevent the requirement for mutating schemas over and over again when we want to\n* reuse the structure but look up data elements by different addresses.\n*\n* One side-effect of this is that a translation table can \"override\" the built-in hashes, since\n* this is always used to resolve hashes before any of the functionCallByHash(pHash, ...) perform\n* their lookups by hash.\n*\n* @class ManyfestHashTranslation\n*/\nclass ManyfestHashTranslation\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) === 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) === 'function') ? pErrorLog : libSimpleLog;\n\n        this.translationTable = {};\n\t}\n\n    translationCount()\n    {\n        return Object.keys(this.translationTable).length;\n    }\n\n    addTranslation(pTranslation)\n    {\n        // This adds a translation in the form of:\n        // { \"SourceHash\": \"DestinationHash\", \"SecondSourceHash\":\"SecondDestinationHash\" }\n        if (typeof(pTranslation) != 'object')\n        {\n            this.logError(`Hash translation addTranslation expected a translation be type object but was passed in ${typeof(pTranslation)}`);\n            return false;\n        }\n\n        let tmpTranslationSources = Object.keys(pTranslation)\n\n        tmpTranslationSources.forEach(\n            (pTranslationSource) =>\n            {\n                if (typeof(pTranslation[pTranslationSource]) != 'string')\n                {\n                    this.logError(`Hash translation addTranslation expected a translation destination hash for [${pTranslationSource}] to be a string but the referrant was a ${typeof(pTranslation[pTranslationSource])}`);\n                }\n                else\n                {\n                    this.translationTable[pTranslationSource] = pTranslation[pTranslationSource];\n                }\n            });\n    }\n\n    removeTranslationHash(pTranslationHash)\n    {\n        if (pTranslationHash in this.translationTable)\n        {\n            delete this.translationTable[pTranslationHash];\n        }\n    }\n\n    // This removes translations.\n    // If passed a string, just removes the single one.\n    // If passed an object, it does all the source keys.\n    removeTranslation(pTranslation)\n    {\n        if (typeof(pTranslation) == 'string')\n        {\n            this.removeTranslationHash(pTranslation);\n            return true;\n        }\n        else if (typeof(pTranslation) == 'object')\n        {\n            let tmpTranslationSources = Object.keys(pTranslation)\n\n            tmpTranslationSources.forEach(\n                (pTranslationSource) =>\n                {\n                    this.removeTranslation(pTranslationSource);\n                });\n            return true;\n        }\n        else\n        {\n            this.logError(`Hash translation removeTranslation expected either a string or an object but the passed-in translation was type ${typeof(pTranslation)}`);\n            return false;\n        }\n    }\n\n    clearTranslations()\n    {\n        this.translationTable = {};\n    }\n\n    translate(pTranslation)\n    {\n        if (pTranslation in this.translationTable)\n        {\n            return this.translationTable[pTranslation];\n        }\n        else\n        {\n            return pTranslation;\n        }\n    }\n}\n\nmodule.exports = ManyfestHashTranslation;","/**\n* @author <steven@velozo.com>\n*/\n\n/**\n* Manyfest simple logging shim (for browser and dependency-free running)\n*/\n\nconst logToConsole = (pLogLine, pLogObject) =>\n{\n    let tmpLogLine = (typeof(pLogLine) === 'string') ? pLogLine : '';\n\n    console.log(`[Manyfest] ${tmpLogLine}`);\n\n    if (pLogObject) console.log(JSON.stringify(pLogObject));\n};\n\nmodule.exports = logToConsole;","/**\n* @author <steven@velozo.com>\n*/\nconst libSimpleLog = require('./Manyfest-LogToConsole.js');\n// This is for resolving functions mid-address\nconst libGetObjectValue = require('./Manyfest-ObjectAddress-GetValue.js');\n\n// TODO: Just until this is a fable service.\nlet _MockFable = { DataFormat: require('./Manyfest-ObjectAddress-Parser.js') };\n\n/**\n* Object Address Resolver\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n*\n* @class ManyfestObjectAddressResolverCheckAddressExists\n*/\nclass ManyfestObjectAddressResolverCheckAddressExists\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.getObjectValueClass = new libGetObjectValue(this.logInfo, this.logError);\n\t}\n\n\t// Check if an address exists.\n\t//\n\t// This is necessary because the getValueAtAddress function is ambiguous on\n\t// whether the element/property is actually there or not (it returns\n\t// undefined whether the property exists or not).  This function checks for\n\t// existance and returns true or false dependent.\n\tcheckAddressExists (pObject, pAddress, pRootObject)\n\t{\n\t\t// TODO: Should these throw an error?\n\t\t// Make sure pObject is an object\n\t\tif (typeof(pObject) != 'object') return false;\n\t\t// Make sure pAddress is a string\n\t\tif (typeof(pAddress) != 'string') return false;\n\n\t\t// Set the root object to the passed-in object if it isn't set yet.  This is expected to be the root object.\n\t\t// NOTE: This was added to support functions mid-stream\n\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t// DONE: Make this work for things like SomeRootObject.Metadata[\"Some.People.Use.Bad.Object.Property.Names\"]\n\t\tlet tmpAddressPartBeginning = _MockFable.DataFormat.stringGetFirstSegment(pAddress);\n\n\t\t// This is the terminal address string (no more dots so the RECUSION ENDS IN HERE somehow)\n\t\tif (tmpAddressPartBeginning.length == pAddress.length)\n\t\t{\n\t\t\t// Check if the address refers to a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = pAddress.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(pAddress) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = pAddress.substring(0, tmpFunctionStartIndex).trim();\n\n\t\t\t\tif (((tmpFunctionAddress in pObject)) && (typeof(pObject[tmpFunctionAddress]) == 'function'))\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Check if the property exists.\n\t\t\t\t\treturn (tmpBoxedPropertyReference in pObject[tmpBoxedPropertyName]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Use the new in operator to see if the element is in the array\n\t\t\t\t\treturn (tmpBoxedPropertyNumber in pObject[tmpBoxedPropertyName]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Check if the property exists\n\t\t\t\treturn (pAddress in pObject);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpSubObjectName = tmpAddressPartBeginning;\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpAddressPartBeginning.length+1);\n\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = tmpSubObjectName.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(tmpSubObjectName) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = tmpSubObjectName.substring(0, tmpFunctionStartIndex).trim();\n\t\t\t\t//tmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\n\t\t\t\tif (!typeof(pObject[tmpFunctionAddress]) == 'function')\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Now see if the function has arguments.\n\t\t\t\t// Implementation notes: * ARGUMENTS MUST SHARE THE SAME ROOT OBJECT CONTEXT *\n\t\t\t\tlet tmpFunctionArguments = _MockFable.DataFormat.stringGetSegments(_MockFable.DataFormat.stringGetEnclosureValueByIndex(tmpSubObjectName.substring(tmpFunctionAddress.length), 0), ',');\n\t\t\t\tif ((tmpFunctionArguments.length == 0) || (tmpFunctionArguments[0] == ''))\n\t\t\t\t{\n\t\t\t\t\t// No arguments... just call the function (bound to the scope of the object it is contained withing)\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.checkAddressExists(pObject[tmpFunctionAddress].apply(pObject), tmpNewAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tlibSimpleLog.log(`Error calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tlibSimpleLog.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet tmpArgumentValues = [];\n\n\t\t\t\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t\t\t\t// Now get the value for each argument\n\t\t\t\t\tfor (let i = 0; i < tmpFunctionArguments.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Resolve the values for each subsequent entry\n\t\t\t\t\t\t// NOTE: This is where the resolves get really tricky.  Recursion within recursion.  Programming gom jabbar, yo.\n\t\t\t\t\t\ttmpArgumentValues.push(this.getObjectValueClass.getValueAtAddress(tmpRootObject, tmpFunctionArguments[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\t//return this.checkAddressExists(pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues), tmpNewAddress, tmpRootObject);\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.checkAddressExists(pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues), tmpNewAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tlibSimpleLog.log(`Error calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tlibSimpleLog.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// Because this is an impossible address, the property doesn't exist\n\t\t\t\t\t// TODO: Should we throw an error in this condition?\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.checkAddressExists(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.checkAddressExists(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\treturn this.checkAddressExists(pObject[tmpSubObjectName], tmpNewAddress, tmpRootObject);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.checkAddressExists(pObject[tmpSubObjectName], tmpNewAddress, tmpRootObject);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressResolverCheckAddressExists;\n","/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\nlet fCleanWrapCharacters = require('./Manyfest-CleanWrapCharacters.js');\nlet fParseConditionals = require(`../source/Manyfest-ParseConditionals.js`)\n\n/**\n* Object Address Resolver - DeleteValue\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n* TODO: Once we validate this pattern is good to go, break these out into\n*       three separate modules.\n*\n* @class ManyfestObjectAddressResolverDeleteValue\n*/\nclass ManyfestObjectAddressResolverDeleteValue\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.cleanWrapCharacters = fCleanWrapCharacters;\n\t}\n\n\t// TODO: Dry me\n\tcheckRecordFilters(pAddress, pRecord)\n\t{\n\t\treturn fParseConditionals(this, pAddress, pRecord);\n\t}\n\n\t// Delete the value of an element at an address\n\tdeleteValueAtAddress (pObject, pAddress, pParentAddress)\n\t{\n\t\t// Make sure pObject (the object we are meant to be recursing) is an object (which could be an array or object)\n\t\tif (typeof(pObject) != 'object') return undefined;\n\t\t// Make sure pAddress (the address we are resolving) is a string\n\t\tif (typeof(pAddress) != 'string') return undefined;\n\t\t// Stash the parent address for later resolution\n\t\tlet tmpParentAddress = \"\";\n\t\tif (typeof(pParentAddress) == 'string')\n\t\t{\n\t\t\ttmpParentAddress = pParentAddress;\n\t\t}\n\n\t\t// TODO: Make this work for things like SomeRootObject.Metadata[\"Some.People.Use.Bad.Object.Property.Names\"]\n\t\tlet tmpSeparatorIndex = pAddress.indexOf('.');\n\n\t\t// This is the terminal address string (no more dots so the RECUSION ENDS IN HERE somehow)\n\t\tif (tmpSeparatorIndex == -1)\n\t\t{\n\t\t\t// Check if the address refers to a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\n\t\t\t// Check for the Object Set Type marker.\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Return the value in the property\n\t\t\t\t\tdelete pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference];\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber];\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tlet tmpInputArray = pObject[tmpBoxedPropertyName];\n\t\t\t\t// Count from the end to the beginning so splice doesn't %&%#$ up the array\n\t\t\t\tfor (let i = tmpInputArray.length - 1; i >= 0; i--)\n\t\t\t\t{\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpInputArray[i]);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Delete elements end to beginning\n\t\t\t\t\t\ttmpInputArray.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// The object has been flagged as an object set, so treat it as such\n\t\t\telse if (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tdelete pObject[tmpObjectPropertyName];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Now is the point in recursion to return the value in the address\n\t\t\t\tdelete pObject[pAddress];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpSubObjectName = pAddress.substring(0, tmpSeparatorIndex);\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpSeparatorIndex+1);\n\n\t\t\t// BOXED ELEMENTS\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Check if the boxed property is an object.\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, tmpParentAddress);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, tmpParentAddress);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the array and grab the addresses from there.\n\t\t\t\tlet tmpArrayProperty = pObject[tmpBoxedPropertyName];\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpBoxedPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpArrayProperty.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}[${i}]`;\n\t\t\t\t\tlet tmpValue = this.deleteValueAtAddress(pObject[tmpBoxedPropertyName][i], tmpNewAddress, tmpPropertyParentAddress);\n\n\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// OBJECT SET\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\t\t\tif (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the Object and grab the addresses from there.\n\t\t\t\tlet tmpObjectProperty = pObject[tmpObjectPropertyName];\n\t\t\t\tlet tmpObjectPropertyKeys = Object.keys(tmpObjectProperty);\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpObjectPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpObjectPropertyKeys.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}.${tmpObjectPropertyKeys[i]}`;\n\t\t\t\t\tlet tmpValue = this.deleteValueAtAddress(pObject[tmpObjectPropertyName][tmpObjectPropertyKeys[i]], tmpNewAddress, tmpPropertyParentAddress);\n\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpValue);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.deleteValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressResolverDeleteValue;","/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\nlet fCleanWrapCharacters = require('./Manyfest-CleanWrapCharacters.js');\nlet fParseConditionals = require(`../source/Manyfest-ParseConditionals.js`);\n\nlet _MockFable = { DataFormat: require('./Manyfest-ObjectAddress-Parser.js') };\n\n/**\n* Object Address Resolver - GetValue\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n* TODO: Once we validate this pattern is good to go, break these out into\n*       three separate modules.\n*\n* @class ManyfestObjectAddressResolverGetValue\n*/\nclass ManyfestObjectAddressResolverGetValue\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.cleanWrapCharacters = fCleanWrapCharacters;\n\t}\n\n\tcheckRecordFilters(pAddress, pRecord)\n\t{\n\t\treturn fParseConditionals(this, pAddress, pRecord);\n\t}\n\n\t// Get the value of an element at an address\n\tgetValueAtAddress (pObject, pAddress, pParentAddress, pRootObject)\n\t{\n\t\t// Make sure pObject (the object we are meant to be recursing) is an object (which could be an array or object)\n\t\tif (typeof(pObject) != 'object')\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\t\tif (pObject === null)\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\t\t// Make sure pAddress (the address we are resolving) is a string\n\t\tif (typeof(pAddress) != 'string')\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\t\t// Stash the parent address for later resolution\n\t\tlet tmpParentAddress = \"\";\n\t\tif (typeof(pParentAddress) == 'string')\n\t\t{\n\t\t\ttmpParentAddress = pParentAddress;\n\t\t}\n\n\t\t// Set the root object to the passed-in object if it isn't set yet.  This is expected to be the root object.\n\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t// DONE: Make this work for things like SomeRootObject.Metadata[\"Some.People.Use.Bad.Object.Property.Names\"]\n\t\tlet tmpAddressPartBeginning = _MockFable.DataFormat.stringGetFirstSegment(pAddress);\n\n\t\t// Adding simple back-navigation in objects\n\t\tif (tmpAddressPartBeginning == '')\n\t\t{\n\t\t\t// Given an address of \"Bundle.Contract.IDContract...Project.IDProject\" the ... would be interpreted as two back-navigations from IDContract.\n\t\t\t// When the address is passed in, though, the first . is already eliminated.  So we can count the dots.\n\t\t\tlet tmpParentAddressParts = _MockFable.DataFormat.stringGetSegments(tmpParentAddress);\n\n\t\t\tlet tmpBackNavigationCount = 0;\n\n\t\t\t// Count the number of dots\n\t\t\tfor (let i = 0; i < pAddress.length; i++)\n\t\t\t{\n\t\t\t\tif (pAddress.charAt(i) != '.')\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttmpBackNavigationCount++;\n\t\t\t}\n\n\t\t\tlet tmpParentAddressLength = tmpParentAddressParts.length - tmpBackNavigationCount;\n\n\t\t\tif (tmpParentAddressLength < 0)\n\t\t\t{\n\t\t\t\t// We are trying to back navigate more than we can.\n\t\t\t\t// TODO: Should this be undefined or should we bank out at the bottom and try to go forward?\n\t\t\t\t// This seems safest for now.\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We are trying to back navigate to a parent object.\n\t\t\t\t// Recurse with the back-propagated parent address, and, the new address without the back-navigation dots.\n\t\t\t\tlet tmpRecurseAddress = pAddress.slice(tmpBackNavigationCount);\n\t\t\t\tif (tmpParentAddressLength > 0)\n\t\t\t\t{\n\t\t\t\t\ttmpRecurseAddress = `${tmpParentAddressParts.slice(0, tmpParentAddressLength).join('.')}.${tmpRecurseAddress}`;\n\t\t\t\t}\n\t\t\t\tthis.logInfo(`Back-navigation detected.  Recursing back to address [${tmpRecurseAddress}]`);\n\t\t\t\treturn this.getValueAtAddress(tmpRootObject, tmpRecurseAddress);\n\t\t\t}\n\t\t}\n\n\t\t// This is the terminal address string (no more dots so the RECUSION ENDS IN HERE somehow)\n\t\tif (tmpAddressPartBeginning.length == pAddress.length)\n\t\t{\n\t\t\t// TODO: Optimize this by having these calls only happen when the previous fails.\n\t\t\t// TODO: Alternatively look for all markers in one pass?\n\t\t\t// Check if the address refers to a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\n\t\t\t// Check for the Object Set Type marker.\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = pAddress.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(pAddress) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = pAddress.substring(0, tmpFunctionStartIndex).trim();\n\n\t\t\t\tif (!typeof(pObject[tmpFunctionAddress]) == 'function')\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Now see if the function has arguments.\n\t\t\t\t// Implementation notes: * ARGUMENTS MUST SHARE THE SAME ROOT OBJECT CONTEXT *\n\t\t\t\tlet tmpFunctionArguments = _MockFable.DataFormat.stringGetSegments(_MockFable.DataFormat.stringGetEnclosureValueByIndex(pAddress.substring(tmpFunctionAddress.length), 0), ',');\n\t\t\t\tif ((tmpFunctionArguments.length == 0) || (tmpFunctionArguments[0] == ''))\n\t\t\t\t{\n\t\t\t\t\t// No arguments... just call the function (bound to the scope of the object it is contained withing)\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn pObject[tmpFunctionAddress].apply(pObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet tmpArgumentValues = [];\n\n\t\t\t\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t\t\t\t// Now get the value for each argument\n\t\t\t\t\tfor (let i = 0; i < tmpFunctionArguments.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Resolve the values for each subsequent entry\n\t\t\t\t\t\t// Check if the argument value is a string literal or a reference to an address\n\t\t\t\t\t\tif ((tmpFunctionArguments[i].length >= 2)\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(0) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"`\"))\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"`\")))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a string literal\n\t\t\t\t\t\t\ttmpArgumentValues.push(tmpFunctionArguments[i].substring(1, tmpFunctionArguments[i].length-1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a hash address\n\t\t\t\t\t\t\ttmpArgumentValues.push(this.getValueAtAddress(tmpRootObject, tmpFunctionArguments[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Return the value in the property\n\t\t\t\t\treturn pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tlet tmpInputArray = pObject[tmpBoxedPropertyName];\n\t\t\t\tlet tmpOutputArray = [];\n\t\t\t\tfor (let i = 0; i < tmpInputArray.length; i++)\n\t\t\t\t{\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpInputArray[i]);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpOutputArray.push(tmpInputArray[i]);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmpOutputArray;\n\t\t\t}\n\t\t\t// The object has been flagged as an object set, so treat it as such\n\t\t\telse if (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn pObject[tmpObjectPropertyName];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Now is the point in recursion to return the value in the address\n\t\t\t\tif (typeof(pObject[pAddress]) != null)\n\t\t\t\t{\n\t\t\t\t\treturn pObject[pAddress];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//let tmpSubObjectName = pAddress.substring(0, tmpSeparatorIndex);\n\t\t\t//let tmpNewAddress = pAddress.substring(tmpSeparatorIndex+1);\n\t\t\tlet tmpSubObjectName = tmpAddressPartBeginning;\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpAddressPartBeginning.length+1);\n\n\t\t\t// BOXED ELEMENTS\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\n\t\t\t// Check if there is a function somewhere in the address... parenthesis start should only be in a function\n\t\t\tlet tmpFunctionStartIndex = tmpSubObjectName.indexOf('(');\n\n\t\t\t// NOTE THAT FUNCTIONS MUST RESOLVE FIRST\n\t\t\t// Functions look like this\n\t\t\t// \t\tMyFunction()\n\t\t\t// \t\tMyFunction(Some.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address)\n\t\t\t// \t\tMyFunction(Some.Address,Some.Other.Address,Some.Third.Address)\n\t\t\t//\n\t\t\t// This could be enhanced to allow purely numeric and string values to be passed to the function.  For now,\n\t\t\t// To heck with that.  This is a simple function call.\n\t\t\t//\n\t\t\t// The requirements to detect a function are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpFunctionStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (_MockFable.DataFormat.stringCountEnclosures(tmpSubObjectName) > 0))\n\t\t\t{\n\t\t\t\tlet tmpFunctionAddress = tmpSubObjectName.substring(0, tmpFunctionStartIndex).trim();\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\n\t\t\t\tif (!typeof(pObject[tmpFunctionAddress]) == 'function')\n\t\t\t\t{\n\t\t\t\t\t// The address suggests it is a function, but it is not.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Now see if the function has arguments.\n\t\t\t\t// Implementation notes: * ARGUMENTS MUST SHARE THE SAME ROOT OBJECT CONTEXT *\n\t\t\t\tlet tmpFunctionArguments = _MockFable.DataFormat.stringGetSegments(_MockFable.DataFormat.stringGetEnclosureValueByIndex(tmpSubObjectName.substring(tmpFunctionAddress.length), 0), ',');\n\t\t\t\tif ((tmpFunctionArguments.length == 0) || (tmpFunctionArguments[0] == ''))\n\t\t\t\t{\n\t\t\t\t\t// No arguments... just call the function (bound to the scope of the object it is contained withing)\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpFunctionAddress].apply(pObject), tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet tmpArgumentValues = [];\n\n\t\t\t\t\tlet tmpRootObject = (typeof(pRootObject) == 'undefined') ? pObject : pRootObject;\n\n\t\t\t\t\t// Now get the value for each argument\n\t\t\t\t\tfor (let i = 0; i < tmpFunctionArguments.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Resolve the values for each subsequent entry\n\t\t\t\t\t\t// Check if the argument value is a string literal or a reference to an address\n\t\t\t\t\t\tif ((tmpFunctionArguments[i].length >= 2)\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(0) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(0) == \"`\"))\n\t\t\t\t\t\t\t&&\n\t\t\t\t\t\t\t((tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == '\"')\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"'\")\n\t\t\t\t\t\t\t|| (tmpFunctionArguments[i].charAt(tmpFunctionArguments[i].length-1) == \"`\")))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a string literal\n\t\t\t\t\t\t\ttmpArgumentValues.push(tmpFunctionArguments[i].substring(1, tmpFunctionArguments[i].length-1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// This is a hash address\n\t\t\t\t\t\t\ttmpArgumentValues.push(this.getValueAtAddress(tmpRootObject, tmpFunctionArguments[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmpFunctionAddress in pObject)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpFunctionAddress].apply(pObject, tmpArgumentValues), tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// The function call failed, so the address doesn't exist\n\t\t\t\t\t\t\tconsole.log(`Error in getValueAtAddress calling function ${tmpFunctionAddress} (address [${pAddress}]): ${pError.message}`);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// The function doesn't exist, so the address doesn't exist\n\t\t\t\t\t\tconsole.log(`Function ${tmpFunctionAddress} does not exist (address [${pAddress}])`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\t// Check if the boxed property is an object.\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.getValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The requirements to detect a boxed set element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\telse if ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket is after the start bracket\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is nothing in the brackets\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex == 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tif (!Array.isArray(pObject[tmpBoxedPropertyName]))\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the array and grab the addresses from there.\n\t\t\t\tlet tmpArrayProperty = pObject[tmpBoxedPropertyName];\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpBoxedPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpArrayProperty.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}[${i}]`;\n\t\t\t\t\tlet tmpValue = this.getValueAtAddress(pObject[tmpBoxedPropertyName][i], tmpNewAddress, tmpPropertyParentAddress, tmpRootObject);\n\n\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// OBJECT SET\n\t\t\t// Note this will not work with a bracket in the same address box set\n\t\t\tlet tmpObjectTypeMarkerIndex = pAddress.indexOf('{}');\n\t\t\tif (tmpObjectTypeMarkerIndex > 0)\n\t\t\t{\n\t\t\t\tlet tmpObjectPropertyName = pAddress.substring(0, tmpObjectTypeMarkerIndex).trim();\n\n\t\t\t\tif (typeof(pObject[tmpObjectPropertyName]) != 'object')\n\t\t\t\t{\n\t\t\t\t\t// We asked for a set from an array but it isnt' an array.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// We need to enumerate the Object and grab the addresses from there.\n\t\t\t\tlet tmpObjectProperty = pObject[tmpObjectPropertyName];\n\t\t\t\tlet tmpObjectPropertyKeys = Object.keys(tmpObjectProperty);\n\t\t\t\t// Managing the parent address is a bit more complex here -- the box will be added for each element.\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpObjectPropertyName}`;\n\t\t\t\t// The container object is where we have the \"Address\":SOMEVALUE pairs\n\t\t\t\tlet tmpContainerObject = {};\n\t\t\t\tfor (let i = 0; i < tmpObjectPropertyKeys.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet tmpPropertyParentAddress = `${tmpParentAddress}.${tmpObjectPropertyKeys[i]}`;\n\t\t\t\t\tlet tmpValue = this.getValueAtAddress(pObject[tmpObjectPropertyName][tmpObjectPropertyKeys[i]], tmpNewAddress, tmpPropertyParentAddress, tmpRootObject);\n\n\t\t\t\t\t// The filtering is complex but allows config-based metaprogramming directly from schema\n\t\t\t\t\tlet tmpKeepRecord = this.checkRecordFilters(pAddress, tmpValue);\n\t\t\t\t\tif (tmpKeepRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpContainerObject[`${tmpPropertyParentAddress}.${tmpNewAddress}`] = tmpValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmpContainerObject;\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\treturn this.getValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\t// Continue to manage the parent address for recursion\n\t\t\t\ttmpParentAddress = `${tmpParentAddress}${(tmpParentAddress.length > 0) ? '.' : ''}${tmpSubObjectName}`;\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.getValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, tmpParentAddress, tmpRootObject);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressResolverGetValue;","// TODO: This is an inelegant solution to delay the rewrite of Manyfest.\n\n// Fable 3.0 has a service for data formatting that deals well with nested enclosures.\n\n// The Manyfest library predates fable 3.0 and the services structure of it, so the functions\n// are more or less pure javascript and as functional as they can be made to be.\n\n// Until we shift Manyfest to be a fable service, these three functions were pulled out of\n// fable to aid in parsing functions with nested enclosures.\n\nmodule.exports = {\n\t/**\n\t * Count the number of segments in a string, respecting enclosures\n\t * \n\t * @param {string} pString \n\t * @param {string} pSeparator \n\t * @param {object} pEnclosureStartSymbolMap \n\t * @param {object} pEnclosureEndSymbolMap \n\t * @returns the count of segments in the string as a number\n\t */\n\tstringCountSegments: (pString, pSeparator, pEnclosureStartSymbolMap, pEnclosureEndSymbolMap) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\n\t\tlet tmpSeparator = (typeof(pSeparator) == 'string') ? pSeparator : '.';\n\n\t\tlet tmpEnclosureStartSymbolMap = (typeof(pEnclosureStartSymbolMap) == 'object') ? pEnclosureStart : { '{': 0, '[': 1, '(': 2 };\n\t\tlet tmpEnclosureEndSymbolMap = (typeof(pEnclosureEndSymbolMap) == 'object') ? pEnclosureEnd : { '}': 0, ']': 1, ')': 2 };\n\n\t\tif (pString.length < 1)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet tmpSegmentCount = 1;\n\t\tlet tmpEnclosureStack = [];\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// IF This is the start of a segment\n\t\t\tif ((tmpString[i] == tmpSeparator)\n\t\t\t\t// AND we are not in a nested portion of the string\n\t\t\t\t&& (tmpEnclosureStack.length == 0))\n\t\t\t{\n\t\t\t\t// Increment the segment count\n\t\t\t\ttmpSegmentCount++;\n\t\t\t}\n\t\t\t// IF This is the start of an enclosure\n\t\t\telse if (tmpString[i] in tmpEnclosureStartSymbolMap)\n\t\t\t{\n\t\t\t\t// Add it to the stack!\n\t\t\t\ttmpEnclosureStack.push(tmpEnclosureStartSymbolMap[tmpString[i]]);\n\t\t\t}\n\t\t\t// IF This is the end of an enclosure\n\t\t\telse if ((tmpString[i] in tmpEnclosureEndSymbolMap)\n\t\t\t\t// AND it matches the current nest level symbol\n\t\t\t\t&& tmpEnclosureEndSymbolMap[tmpString[i]] == tmpEnclosureStack[tmpEnclosureStack.length - 1])\n\t\t\t{\n\t\t\t\t// Pop it off the stack!\n\t\t\t\ttmpEnclosureStack.pop();\n\t\t\t}\n\t\t}\n\n\t\treturn tmpSegmentCount;\n\t},\n\n\t/**\n\t * Get the first segment in a string, respecting enclosures\n\t * \n\t * @param {string} pString \n\t * @param {string} pSeparator \n\t * @param {object} pEnclosureStartSymbolMap \n\t * @param {object} pEnclosureEndSymbolMap \n\t * @returns the first segment in the string as a string\n\t */\n\tstringGetFirstSegment: (pString, pSeparator, pEnclosureStartSymbolMap, pEnclosureEndSymbolMap) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\n\t\tlet tmpSeparator = (typeof(pSeparator) == 'string') ? pSeparator : '.';\n\n\t\tlet tmpEnclosureStartSymbolMap = (typeof(pEnclosureStartSymbolMap) == 'object') ? pEnclosureStart : { '{': 0, '[': 1, '(': 2 };\n\t\tlet tmpEnclosureEndSymbolMap = (typeof(pEnclosureEndSymbolMap) == 'object') ? pEnclosureEnd : { '}': 0, ']': 1, ')': 2 };\n\n\t\tif (pString.length < 1)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet tmpEnclosureStack = [];\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// IF This is the start of a segment\n\t\t\tif ((tmpString[i] == tmpSeparator)\n\t\t\t\t// AND we are not in a nested portion of the string\n\t\t\t\t&& (tmpEnclosureStack.length == 0))\n\t\t\t{\n\t\t\t\t// Return the segment\n\t\t\t\treturn tmpString.substring(0, i);\n\t\t\t}\n\t\t\t// IF This is the start of an enclosure\n\t\t\telse if (tmpString[i] in tmpEnclosureStartSymbolMap)\n\t\t\t{\n\t\t\t\t// Add it to the stack!\n\t\t\t\ttmpEnclosureStack.push(tmpEnclosureStartSymbolMap[tmpString[i]]);\n\t\t\t}\n\t\t\t// IF This is the end of an enclosure\n\t\t\telse if ((tmpString[i] in tmpEnclosureEndSymbolMap)\n\t\t\t\t// AND it matches the current nest level symbol\n\t\t\t\t&& tmpEnclosureEndSymbolMap[tmpString[i]] == tmpEnclosureStack[tmpEnclosureStack.length - 1])\n\t\t\t{\n\t\t\t\t// Pop it off the stack!\n\t\t\t\ttmpEnclosureStack.pop();\n\t\t\t}\n\t\t}\n\n\t\treturn tmpString;\n\t},\n\n\t/**\n\t * Get all segments in a string, respecting enclosures\n\t * \n\t * @param {string} pString \n\t * @param {string} pSeparator \n\t * @param {object} pEnclosureStartSymbolMap \n\t * @param {object} pEnclosureEndSymbolMap \n\t * @returns the first segment in the string as a string\n\t */\n\tstringGetSegments: (pString, pSeparator, pEnclosureStartSymbolMap, pEnclosureEndSymbolMap)=>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\n\t\tlet tmpSeparator = (typeof(pSeparator) == 'string') ? pSeparator : '.';\n\n\t\tlet tmpEnclosureStartSymbolMap = (typeof(pEnclosureStartSymbolMap) == 'object') ? pEnclosureStart : { '{': 0, '[': 1, '(': 2 };\n\t\tlet tmpEnclosureEndSymbolMap = (typeof(pEnclosureEndSymbolMap) == 'object') ? pEnclosureEnd : { '}': 0, ']': 1, ')': 2 };\n\n\t\tlet tmpCurrentSegmentStart = 0;\n\t\tlet tmpSegmentList = [];\n\n\t\tif (pString.length < 1)\n\t\t{\n\t\t\treturn tmpSegmentList;\n\t\t}\n\n\t\tlet tmpEnclosureStack = [];\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// IF This is the start of a segment\n\t\t\tif ((tmpString[i] == tmpSeparator)\n\t\t\t\t// AND we are not in a nested portion of the string\n\t\t\t\t&& (tmpEnclosureStack.length == 0))\n\t\t\t{\n\t\t\t\t// Return the segment\n\t\t\t\ttmpSegmentList.push(tmpString.substring(tmpCurrentSegmentStart, i));\n\t\t\t\ttmpCurrentSegmentStart = i+1;\n\t\t\t}\n\t\t\t// IF This is the start of an enclosure\n\t\t\telse if (tmpString[i] in tmpEnclosureStartSymbolMap)\n\t\t\t{\n\t\t\t\t// Add it to the stack!\n\t\t\t\ttmpEnclosureStack.push(tmpEnclosureStartSymbolMap[tmpString[i]]);\n\t\t\t}\n\t\t\t// IF This is the end of an enclosure\n\t\t\telse if ((tmpString[i] in tmpEnclosureEndSymbolMap)\n\t\t\t\t// AND it matches the current nest level symbol\n\t\t\t\t&& tmpEnclosureEndSymbolMap[tmpString[i]] == tmpEnclosureStack[tmpEnclosureStack.length - 1])\n\t\t\t{\n\t\t\t\t// Pop it off the stack!\n\t\t\t\ttmpEnclosureStack.pop();\n\t\t\t}\n\t\t}\n\n\t\tif (tmpCurrentSegmentStart < tmpString.length)\n\t\t{\n\t\t\ttmpSegmentList.push(tmpString.substring(tmpCurrentSegmentStart));\n\t\t}\n\n\t\treturn tmpSegmentList;\n\t},\n\n\t/**\n\t * Count the number of enclosures in a string based on the start and end characters.\n\t *\n\t * If no start or end characters are specified, it will default to parentheses.  If the string is not a string, it will return 0.\n\t *\n\t * @param {string} pString\n\t * @param {string} pEnclosureStart\n\t * @param {string} pEnclosureEnd\n\t * @returns the count of full in the string\n\t */\n\tstringCountEnclosures: (pString, pEnclosureStart, pEnclosureEnd) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\t\tlet tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t\tlet tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t\tlet tmpEnclosureCount = 0;\n\t\tlet tmpEnclosureDepth = 0;\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// This is the start of an enclosure\n\t\t\tif (tmpString[i] == tmpEnclosureStart)\n\t\t\t{\n\t\t\t\tif (tmpEnclosureDepth == 0)\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureCount++;\n\t\t\t\t}\n\t\t\t\ttmpEnclosureDepth++;\n\t\t\t}\n\t\t\telse if (tmpString[i] == tmpEnclosureEnd)\n\t\t\t{\n\t\t\t\ttmpEnclosureDepth--;\n\t\t\t}\n\t\t}\n\n\t\treturn tmpEnclosureCount;\n\t},\n\n\n\t/**\n\t * Get the value of the enclosure at the specified index.\n\t *\n\t * If the index is not a number, it will default to 0.  If the string is not a string, it will return an empty string.  If the enclosure is not found, it will return an empty string.  If the enclosure\n\t *\n\t * @param {string} pString\n\t * @param {number} pEnclosureIndexToGet\n\t * @param {string} pEnclosureStart\n\t * @param {string}} pEnclosureEnd\n\t * @returns {string}\n\t */\n\tstringGetEnclosureValueByIndex: (pString, pEnclosureIndexToGet, pEnclosureStart, pEnclosureEnd) =>\n\t{\n\t\tlet tmpString = (typeof(pString) == 'string') ? pString : '';\n\t\tlet tmpEnclosureIndexToGet = (typeof(pEnclosureIndexToGet) == 'number') ? pEnclosureIndexToGet : 0;\n\t\tlet tmpEnclosureStart = (typeof(pEnclosureStart) == 'string') ? pEnclosureStart : '(';\n\t\tlet tmpEnclosureEnd = (typeof(pEnclosureEnd) == 'string') ? pEnclosureEnd : ')';\n\n\t\tlet tmpEnclosureCount = 0;\n\t\tlet tmpEnclosureDepth = 0;\n\n\t\tlet tmpMatchedEnclosureIndex = false;\n\t\tlet tmpEnclosedValueStartIndex = 0;\n\t\tlet tmpEnclosedValueEndIndex = 0;\n\n\t\tfor (let i = 0; i < tmpString.length; i++)\n\t\t{\n\t\t\t// This is the start of an enclosure\n\t\t\tif (tmpString[i] == tmpEnclosureStart)\n\t\t\t{\n\t\t\t\ttmpEnclosureDepth++;\n\n\t\t\t\t// Only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif (tmpEnclosureDepth == 1)\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosureCount++;\n\t\t\t\t\tif (tmpEnclosureIndexToGet == (tmpEnclosureCount - 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// This is the start of *the* enclosure\n\t\t\t\t\t\ttmpMatchedEnclosureIndex = true;\n\t\t\t\t\t\ttmpEnclosedValueStartIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This is the end of an enclosure\n\t\t\telse if (tmpString[i] == tmpEnclosureEnd)\n\t\t\t{\n\t\t\t\ttmpEnclosureDepth--;\n\n\t\t\t\t// Again, only count enclosures at depth 1, but still this parses both pairs of all of them.\n\t\t\t\tif ((tmpEnclosureDepth == 0) &&\n\t\t\t\t\ttmpMatchedEnclosureIndex &&\n\t\t\t\t\t(tmpEnclosedValueEndIndex <= tmpEnclosedValueStartIndex))\n\t\t\t\t{\n\t\t\t\t\ttmpEnclosedValueEndIndex = i;\n\t\t\t\t\ttmpMatchedEnclosureIndex = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (tmpEnclosureCount <= tmpEnclosureIndexToGet)\n\t\t{\n\t\t\t// Return an empty string if the enclosure is not found\n\t\t\treturn '';\n\t\t}\n\n\t\tif ((tmpEnclosedValueEndIndex > 0) && (tmpEnclosedValueEndIndex > tmpEnclosedValueStartIndex))\n\t\t{\n\t\t\treturn tmpString.substring(tmpEnclosedValueStartIndex+1, tmpEnclosedValueEndIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpString.substring(tmpEnclosedValueStartIndex+1);\n\t\t}\n\t}\n}","/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\nlet fCleanWrapCharacters = require('./Manyfest-CleanWrapCharacters.js');\n\n/**\n* Object Address Resolver - SetValue\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n*\n* @class ManyfestObjectAddressSetValue\n*/\nclass ManyfestObjectAddressSetValue\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\n\t\tthis.cleanWrapCharacters = fCleanWrapCharacters;\n\t}\n\n\t// Set the value of an element at an address\n\tsetValueAtAddress (pObject, pAddress, pValue)\n\t{\n\t\t// Make sure pObject is an object\n\t\tif (typeof(pObject) != 'object') return false;\n\t\t// Make sure pAddress is a string\n\t\tif (typeof(pAddress) != 'string') return false;\n\n\t\tlet tmpSeparatorIndex = pAddress.indexOf('.');\n\n\t\tif (tmpSeparatorIndex == -1)\n\t\t{\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = pAddress.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = pAddress.indexOf(']');\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[10]\n\t\t\t// \t\tMyValues['Name']\n\t\t\t// \t\tMyValues[\"Age\"]\n\t\t\t// \t\tMyValues[`Cost`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\t// The \"Name\" of the Object contained too the left of the bracket\n\t\t\t\tlet tmpBoxedPropertyName = pAddress.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\t// The \"Reference\" to the property within it, either an array element or object property\n\t\t\t\tlet tmpBoxedPropertyReference = pAddress.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\t\t\t\t// Attempt to parse the reference as a number, which will be used as an array element\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\t\t\t\tlet tmpIndexIsNumeric = !isNaN(tmpBoxedPropertyNumber);\n\n\t\t\t\tif (pObject[tmpBoxedPropertyName] == null)\n\t\t\t\t{\n\t\t\t\t\tif (tmpIndexIsNumeric)\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = [];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = {};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If the subproperty doesn't test as a proper Object, none of the rest of this is possible.\n\t\t\t\t// This is a rare case where Arrays testing as Objects is useful\n\t\t\t\tif (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) == isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to treat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynamic object property.\n\t\t\t\t\t// We would expect the property to be wrapped in some kind of quotes so strip them\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\tif (!(tmpBoxedPropertyReference in pObject[tmpBoxedPropertyName]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyReference] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return the value in the property\n\t\t\t\t\t//TODO: For cases where we have chained [][] properties, this needs to recurse somehow\n\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyReference] = pValue;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twhile(pObject[tmpBoxedPropertyName].length < (tmpBoxedPropertyNumber + 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber] = pValue;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Now is the time in recursion to set the value in the object\n\t\t\t\tpObject[pAddress] = pValue;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpSubObjectName = pAddress.substring(0, tmpSeparatorIndex);\n\t\t\tlet tmpNewAddress = pAddress.substring(tmpSeparatorIndex+1);\n\n\t\t\t// Test if the tmpNewAddress is an array or object\n\t\t\t// Check if it's a boxed property\n\t\t\tlet tmpBracketStartIndex = tmpSubObjectName.indexOf('[');\n\t\t\tlet tmpBracketStopIndex = tmpSubObjectName.indexOf(']');\n\t\t\t// Boxed elements look like this:\n\t\t\t// \t\tMyValues[42]\n\t\t\t// \t\tMyValues['Color']\n\t\t\t// \t\tMyValues[\"Weight\"]\n\t\t\t// \t\tMyValues[`Diameter`]\n\t\t\t//\n\t\t\t// When we are passed SomeObject[\"Name\"] this code below recurses as if it were SomeObject.Name\n\t\t\t// The requirements to detect a boxed element are:\n\t\t\t//    1) The start bracket is after character 0\n\t\t\tif ((tmpBracketStartIndex > 0)\n\t\t\t//    2) The end bracket has something between them\n\t\t\t\t&& (tmpBracketStopIndex > tmpBracketStartIndex)\n\t\t\t//    3) There is data\n\t\t\t\t&& (tmpBracketStopIndex - tmpBracketStartIndex > 1))\n\t\t\t{\n\t\t\t\tlet tmpBoxedPropertyName = tmpSubObjectName.substring(0, tmpBracketStartIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyReference = tmpSubObjectName.substring(tmpBracketStartIndex+1, tmpBracketStopIndex).trim();\n\n\t\t\t\tlet tmpBoxedPropertyNumber = parseInt(tmpBoxedPropertyReference, 10);\n\t\t\t\tlet tmpIndexIsNumeric = !isNaN(tmpBoxedPropertyNumber);\n\n\t\t\t\t//if (typeof(pObject[tmpBoxedPropertyName]) !== 'object')\n\t\t\t\tif (pObject[tmpBoxedPropertyName] == null)\n\t\t\t\t{\n\t\t\t\t\tif (tmpIndexIsNumeric)\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = [];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName] = {};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Guard: If the referrant is a number and the boxed property is not an array, or vice versa, return undefined.\n\t\t\t\t//        This seems confusing to me at first read, so explaination:\n\t\t\t\t//        Is the Boxed Object an Array?  TRUE\n\t\t\t\t//        And is the Reference inside the boxed Object not a number? TRUE\n\t\t\t\t//        -->  So when these are in agreement, it's an impossible access state\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[1].Tardy\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an object, so the [1].Tardy is not possible to access\n\t\t\t\t// This could be a failure in the recursion chain because they passed something like this in:\n\t\t\t\t//    StudentData.Sections.Algebra.Students[\"JaneDoe\"].Grade\n\t\t\t\t//       BUT\n\t\t\t\t//         StudentData.Sections.Algebra.Students is an array, so the [\"JaneDoe\"].Grade is not possible to access\n\t\t\t\t// TODO: Should this be an error or something?  Should we keep a log of failures like this?\n\t\t\t\tif (Array.isArray(pObject[tmpBoxedPropertyName]) != tmpIndexIsNumeric)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t//This is a bracketed value\n\t\t\t\t//    4) If the middle part is *only* a number (no single, double or backtick quotes) it is an array element,\n\t\t\t\t//       otherwise we will try to reat it as a dynamic object property.\n\t\t\t\tif (isNaN(tmpBoxedPropertyNumber))\n\t\t\t\t{\n\t\t\t\t\t// This isn't a number ... let's treat it as a dynanmic object property.\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('\"', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters('`', tmpBoxedPropertyReference);\n\t\t\t\t\ttmpBoxedPropertyReference = this.cleanWrapCharacters(\"'\", tmpBoxedPropertyReference);\n\n\t\t\t\t\tif (!(tmpBoxedPropertyReference in pObject[tmpBoxedPropertyName]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName][tmpBoxedPropertyReference] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse directly into the subobject\n\t\t\t\t\treturn this.setValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyReference], tmpNewAddress, pValue);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twhile(pObject[tmpBoxedPropertyName].length < (tmpBoxedPropertyNumber + 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the subobject doesn't exist, create it\n\t\t\t\t\t\tpObject[tmpBoxedPropertyName].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\t// We parsed a valid number out of the boxed property name, so recurse into the array\n\t\t\t\t\treturn this.setValueAtAddress(pObject[tmpBoxedPropertyName][tmpBoxedPropertyNumber], tmpNewAddress, pValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there is an object property already named for the sub object, but it isn't an object\n\t\t\t// then the system can't set the value in there.  Error and abort!\n\t\t\tif ((tmpSubObjectName in pObject) && typeof(pObject[tmpSubObjectName]) !== 'object')\n\t\t\t{\n\t\t\t\tif (!('__ERROR' in pObject))\n\t\t\t\t\tpObject['__ERROR'] = {};\n\t\t\t\t// Put it in an error object so data isn't lost\n\t\t\t\tpObject['__ERROR'][pAddress] = pValue;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (tmpSubObjectName in pObject)\n\t\t\t{\n\t\t\t\t// If there is already a subobject pass that to the recursive thingy\n\t\t\t\treturn this.setValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, pValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Create a subobject and then pass that\n\t\t\t\tpObject[tmpSubObjectName] = {};\n\t\t\t\treturn this.setValueAtAddress(pObject[tmpSubObjectName], tmpNewAddress, pValue);\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressSetValue;","/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\n/**\n* Object Address Generation\n*\n* Automagically generate addresses and properties based on a passed-in object,\n* to be used for easy creation of schemas.  Meant to simplify the lives of\n* developers wanting to create schemas without typing a bunch of stuff.\n*\n* IMPORTANT NOTE: This code is intentionally more verbose than necessary, to\n*                 be extremely clear what is going on in the recursion for\n*                 each of the three address resolution functions.\n*\n*                 Although there is some opportunity to repeat ourselves a\n*                 bit less in this codebase (e.g. with detection of arrays\n*                 versus objects versus direct properties), it can make\n*                 debugging.. challenging.  The minified version of the code\n*                 optimizes out almost anything repeated in here.  So please\n*                 be kind and rewind... meaning please keep the codebase less\n*                 terse and more verbose so humans can comprehend it.\n*\n*\n* @class ManyfestObjectAddressGeneration\n*/\nclass ManyfestObjectAddressGeneration\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) == 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) == 'function') ? pErrorLog : libSimpleLog;\n\t}\n\n\t// generateAddressses\n\t//\n\t// This flattens an object into a set of key:value pairs for *EVERY SINGLE\n\t// POSSIBLE ADDRESS* in the object.  It can get ... really insane really\n\t// quickly.  This is not meant to be used directly to generate schemas, but\n\t// instead as a starting point for scripts or UIs.\n\t//\n\t// This will return a mega set of key:value pairs with all possible schema\n\t// permutations and default values (when not an object) and everything else.\n\tgenerateAddressses (pObject, pBaseAddress, pSchema)\n\t{\n\t\tlet tmpBaseAddress = (typeof(pBaseAddress) == 'string') ? pBaseAddress : '';\n\t\tlet tmpSchema = (typeof(pSchema) == 'object') ? pSchema : {};\n\n\t\tlet tmpObjectType = typeof(pObject);\n\n\t\tlet tmpSchemaObjectEntry = (\n\t\t\t{\n\t\t\t\tAddress: tmpBaseAddress,\n\t\t\t\tHash: tmpBaseAddress,\n\t\t\t\tName: tmpBaseAddress,\n\t\t\t\t// This is so scripts and UI controls can force a developer to opt-in.\n\t\t\t\tInSchema: false\n\t\t\t}\n\t\t)\n\n\t\tif ((tmpObjectType == 'object') && (pObject == null))\n\t\t{\n\t\t\ttmpObjectType = 'null';\n\t\t}\n\n\t\tswitch(tmpObjectType)\n\t\t{\n\t\t\tcase 'string':\n\t\t\t\ttmpSchemaObjectEntry.DataType = 'String';\n\t\t\t\ttmpSchemaObjectEntry.Default = pObject;\n\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\tcase 'bigint':\n\t\t\t\ttmpSchemaObjectEntry.DataType = 'Number';\n\t\t\t\ttmpSchemaObjectEntry.Default = pObject;\n\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\tbreak;\n\t\t\tcase 'undefined':\n\t\t\tcase 'null':\n\t\t\t\ttmpSchemaObjectEntry.DataType = 'Any';\n\t\t\t\ttmpSchemaObjectEntry.Default = pObject;\n\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(pObject))\n\t\t\t\t{\n\t\t\t\t\ttmpSchemaObjectEntry.DataType = 'Array';\n\t\t\t\t\tif (tmpBaseAddress != '')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < pObject.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.generateAddressses(pObject[i], `${tmpBaseAddress}[${i}]`, tmpSchema);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmpSchemaObjectEntry.DataType = 'Object';\n\t\t\t\t\tif (tmpBaseAddress != '')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpSchema[tmpBaseAddress] = tmpSchemaObjectEntry;\n\t\t\t\t\t\ttmpBaseAddress += '.';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet tmpObjectProperties = Object.keys(pObject);\n\n\t\t\t\t\tfor (let i = 0; i < tmpObjectProperties.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.generateAddressses(pObject[tmpObjectProperties[i]], `${tmpBaseAddress}${tmpObjectProperties[i]}`, tmpSchema);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'symbol':\n\t\t\tcase 'function':\n\t\t\t\t// Symbols and functions neither recurse nor get added to the schema\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn tmpSchema;\n\t}\n};\n\nmodule.exports = ManyfestObjectAddressGeneration;","// Given a string, parse out any conditional expressions and set whether or not to keep the record.\n//\n// For instance:\n// \t\t'files[]<<~?format,==,Thumbnail?~>>'\n//      'files[]<<~?format,==,Metadata?~>>'\n//      'files[]<<~?size,>,4000?~>>'\n//\n// The wrapping parts are the <<~? and ?~>> megabrackets.\n//\n// The function does not need to alter the string -- just check the conditionals within.\n\n// TODO: Consider making this an es6 class\n\n// Let's use indexOf since it is apparently the fastest.\nconst _ConditionalStanzaStart = '<<~?';\nconst _ConditionalStanzaStartLength = _ConditionalStanzaStart.length;\nconst _ConditionalStanzaEnd = '?~>>';\nconst _ConditionalStanzaEndLength = _ConditionalStanzaEnd.length;\n\n// Ugh dependency injection.  Can't wait to make these all fable services.\n//let libObjectAddressCheckAddressExists = new (require('./Manyfest-ObjectAddress-CheckAddressExists.js'))();\n\n// Test the condition of a value in a record\nconst testCondition = (pManyfest, pRecord, pSearchAddress, pSearchComparator, pValue) =>\n{\n\tswitch(pSearchComparator)\n\t{\n\t\tcase 'TRUE':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) === true);\n\t\t\tbreak;\n\t\tcase 'FALSE':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) === false);\n\t\t\tbreak;\n\t\tcase 'LNGT':\n\t\tcase 'LENGTH_GREATER_THAN':\n\t\t\tswitch(typeof(pManyfest.getValueAtAddress(pRecord, pSearchAddress)))\n\t\t\t{\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length > pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length > pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'LNLT':\n\t\tcase 'LENGTH_LESS_THAN':\n\t\t\tswitch(typeof(pManyfest.getValueAtAddress(pRecord, pSearchAddress)))\n\t\t\t{\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length < pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress).length < pValue);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t// TODO: Welcome to dependency hell.  This fixes itself when we move to fable services.\n\t\t// case 'EX':\n\t\t// case 'EXISTS':\n\t\t// \treturn libObjectAddressCheckAddressExists.checkAddressExists(pRecord, pSearchAddress);\n\t\t// \tbreak;\n\t\t// case 'DNEX':\n\t\t// case 'DOES_NOT_EXIST':\n\t\t// \treturn !libObjectAddressCheckAddressExists.checkAddressExists(pRecord, pSearchAddress);\n\t\t// \tbreak;\n\t\tcase '!=':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) != pValue);\n\t\t\tbreak;\n\t\tcase '<':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) < pValue);\n\t\t\tbreak;\n\t\tcase '>':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) > pValue);\n\t\t\tbreak;\n\t\tcase '<=':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) <= pValue);\n\t\t\tbreak;\n\t\tcase '>=':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) >= pValue);\n\t\t\tbreak;\n\t\tcase '===':\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) === pValue);\n\t\t\tbreak;\n\t\tcase '==':\n\t\tdefault:\n\t\t\treturn (pManyfest.getValueAtAddress(pRecord, pSearchAddress) == pValue);\n\t\t\tbreak;\n\t}\n};\n\nconst parseConditionals = (pManyfest, pAddress, pRecord) =>\n{\n\tlet tmpKeepRecord = true;\n\n\t/*\n\t\tAlgorithm is simple:\n\n\t\t1.  Enuerate start points\n\t\t2.  Find stop points within each start point\n\t\t3. Check the conditional\n\t*/\n\tlet tmpStartIndex = pAddress.indexOf(_ConditionalStanzaStart);\n\n\twhile (tmpStartIndex != -1)\n\t{\n\t\tlet tmpStopIndex = pAddress.indexOf(_ConditionalStanzaEnd, tmpStartIndex+_ConditionalStanzaStartLength);\n\n\t\tif (tmpStopIndex != -1)\n\t\t{\n\t\t\tlet tmpMagicComparisonPatternSet = pAddress.substring(tmpStartIndex+_ConditionalStanzaStartLength, tmpStopIndex).split(',');\n\n\t\t\t// The address to search for\n\t\t\tlet tmpSearchAddress = tmpMagicComparisonPatternSet[0];\n\n\t\t\t// The copmparison expression (EXISTS as default)\n\t\t\tlet tmpSearchComparator = 'EXISTS';\n\t\t\tif (tmpMagicComparisonPatternSet.length > 1)\n\t\t\t{\n\t\t\t\ttmpSearchComparator = tmpMagicComparisonPatternSet[1];\t\t\t\t\n\t\t\t}\n\n\t\t\t// The value to search for\n\t\t\tlet tmpSearchValue = false;\n\t\t\tif (tmpMagicComparisonPatternSet.length > 2)\n\t\t\t{\n\t\t\t\ttmpSearchValue = tmpMagicComparisonPatternSet[2];\n\t\t\t}\n\n\t\t\t// Process the piece\n\t\t\ttmpKeepRecord = tmpKeepRecord && testCondition(pManyfest, pRecord, tmpSearchAddress, tmpSearchComparator, tmpSearchValue);\n\t\t\ttmpStartIndex = pAddress.indexOf(_ConditionalStanzaStart, tmpStopIndex+_ConditionalStanzaEndLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpStartIndex = -1;\n\t\t}\n\t\t\n\t}\n\n\treturn tmpKeepRecord;\n}\n\nmodule.exports = parseConditionals;","/**\n* @author <steven@velozo.com>\n*/\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\n/**\n* Schema Manipulation Functions\n*\n* @class ManyfestSchemaManipulation\n*/\nclass ManyfestSchemaManipulation\n{\n\tconstructor(pInfoLog, pErrorLog)\n\t{\n\t\t// Wire in logging\n\t\tthis.logInfo = (typeof(pInfoLog) === 'function') ? pInfoLog : libSimpleLog;\n\t\tthis.logError = (typeof(pErrorLog) === 'function') ? pErrorLog : libSimpleLog;\n\t}\n\n    // This translates the default address mappings to something different.\n    //\n    // For instance you can pass in manyfest schema descriptor object:\n    // \t{\n\t//\t  \"Address.Of.a\": { \"Hash\": \"a\", \"Type\": \"Number\" },\n\t//\t  \"Address.Of.b\": { \"Hash\": \"b\", \"Type\": \"Number\" }\n\t//  }\n    //\n    //\n    // And then an address mapping (basically a Hash->Address map)\n    //  {\n    //    \"a\": \"New.Address.Of.a\",\n    //    \"b\": \"New.Address.Of.b\"\n    //  }\n    //\n    // NOTE: This mutates the schema object permanently, altering the base hash.\n    //       If there is a collision with an existing address, it can lead to overwrites.\n    // TODO: Discuss what should happen on collisions.\n\tresolveAddressMappings(pManyfestSchemaDescriptors, pAddressMapping)\n\t{\n\t\tif (typeof(pManyfestSchemaDescriptors) != 'object')\n\t\t{\n\t\t\tthis.logError(`Attempted to resolve address mapping but the descriptor was not an object.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof(pAddressMapping) != 'object')\n\t\t{\n\t\t\t// No mappings were passed in\n\t\t\treturn true;\n\t\t}\n\n\t\t// Get the arrays of both the schema definition and the hash mapping\n\t\tlet tmpManyfestAddresses = Object.keys(pManyfestSchemaDescriptors);\n\t\tlet tmpHashMapping = {};\n\t\ttmpManyfestAddresses.forEach(\n\t\t\t(pAddress) =>\n\t\t\t{\n\t\t\t\tif ('Hash' in pManyfestSchemaDescriptors[pAddress])\n\t\t\t\t{\n\t\t\t\t\ttmpHashMapping[pManyfestSchemaDescriptors[pAddress].Hash] = pAddress;\n\t\t\t\t}\n\t\t\t});\n\n\t\tlet tmpAddressMappingSet = Object.keys(pAddressMapping);\n\n\t\ttmpAddressMappingSet.forEach(\n\t\t\t(pInputAddress) =>\n\t\t\t{\n\t\t\t\tlet tmpNewDescriptorAddress = pAddressMapping[pInputAddress];\n\t\t\t\tlet tmpOldDescriptorAddress = false;\n\t\t\t\tlet tmpDescriptor = false;\n\n\t\t\t\t// See if there is a matching descriptor either by Address directly or Hash\n\t\t\t\tif (pInputAddress in pManyfestSchemaDescriptors)\n\t\t\t\t{\n\t\t\t\t\ttmpOldDescriptorAddress = pInputAddress;\n\t\t\t\t}\n\t\t\t\telse if (pInputAddress in tmpHashMapping)\n\t\t\t\t{\n\t\t\t\t\ttmpOldDescriptorAddress = tmpHashMapping[pInputAddress];\n\t\t\t\t}\n\n\t\t\t\t// If there was a matching descriptor in the manifest, store it in the temporary descriptor\n\t\t\t\tif (tmpOldDescriptorAddress)\n\t\t\t\t{\n\t\t\t\t\ttmpDescriptor = pManyfestSchemaDescriptors[tmpOldDescriptorAddress];\n\t\t\t\t\tdelete pManyfestSchemaDescriptors[tmpOldDescriptorAddress];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Create a new descriptor!  Map it to the input address.\n\t\t\t\t\ttmpDescriptor = { Hash:pInputAddress };\n\t\t\t\t}\n\n\t\t\t\t// Now re-add the descriptor to the manyfest schema\n\t\t\t\tpManyfestSchemaDescriptors[tmpNewDescriptorAddress] = tmpDescriptor;\n\t\t\t});\n\n\t\treturn true;\n\t}\n\n\tsafeResolveAddressMappings(pManyfestSchemaDescriptors, pAddressMapping)\n\t{\n\t\t// This returns the descriptors as a new object, safely remapping without mutating the original schema Descriptors\n\t\tlet tmpManyfestSchemaDescriptors = JSON.parse(JSON.stringify(pManyfestSchemaDescriptors));\n\t\tthis.resolveAddressMappings(tmpManyfestSchemaDescriptors, pAddressMapping);\n\t\treturn tmpManyfestSchemaDescriptors;\n\t}\n\n\tmergeAddressMappings(pManyfestSchemaDescriptorsDestination, pManyfestSchemaDescriptorsSource)\n\t{\n\t\tif ((typeof(pManyfestSchemaDescriptorsSource) != 'object') || (typeof(pManyfestSchemaDescriptorsDestination) != 'object'))\n\t\t{\n\t\t\tthis.logError(`Attempted to merge two schema descriptors but both were not objects.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpSource = JSON.parse(JSON.stringify(pManyfestSchemaDescriptorsSource));\n\t\tlet tmpNewManyfestSchemaDescriptors = JSON.parse(JSON.stringify(pManyfestSchemaDescriptorsDestination));\n\n\t\t// The first passed-in set of descriptors takes precedence.\n\t\tlet tmpDescriptorAddresses = Object.keys(tmpSource);\n\n\t\ttmpDescriptorAddresses.forEach(\n\t\t\t(pDescriptorAddress) =>\n\t\t\t{\n\t\t\t\tif (!(pDescriptorAddress in tmpNewManyfestSchemaDescriptors))\n\t\t\t\t{\n\t\t\t\t\ttmpNewManyfestSchemaDescriptors[pDescriptorAddress] = tmpSource[pDescriptorAddress];\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn tmpNewManyfestSchemaDescriptors;\n\t}\n}\n\nmodule.exports = ManyfestSchemaManipulation;","/**\n* @author <steven@velozo.com>\n*/\nconst libFableServiceProviderBase = require('fable-serviceproviderbase');\n\nlet libSimpleLog = require('./Manyfest-LogToConsole.js');\n\nlet libHashTranslation = require('./Manyfest-HashTranslation.js');\nlet libObjectAddressCheckAddressExists = require('./Manyfest-ObjectAddress-CheckAddressExists.js');\nlet libObjectAddressGetValue = require('./Manyfest-ObjectAddress-GetValue.js');\nlet libObjectAddressSetValue = require('./Manyfest-ObjectAddress-SetValue.js');\nlet libObjectAddressDeleteValue = require('./Manyfest-ObjectAddress-DeleteValue.js');\nlet libObjectAddressGeneration = require('./Manyfest-ObjectAddressGeneration.js');\nlet libSchemaManipulation = require('./Manyfest-SchemaManipulation.js');\n\nconst _DefaultConfiguration = { Scope:'DEFAULT', Descriptors: {} }\n\n/**\n * @typedef {{\n *   Hash?: string,\n *   Name?: string,\n *   DataType?: string,\n *   Required?: boolean,\n *   Address?: string,\n *   Description?: string,\n *   [key: string]: any,\n * }} ManifestDescriptor\n */\n\n/**\n* Manyfest object address-based descriptions and manipulations.\n*\n* @class Manyfest\n*/\nclass Manyfest extends libFableServiceProviderBase\n{\n\tconstructor(pFable, pManifest, pServiceHash)\n\t{\n\t\tif (pFable === undefined)\n\t\t{\n\t\t\tsuper({});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsuper(pFable, pManifest, pServiceHash);\n\t\t}\n\n\t\t/** @type {Record<string, any>} */\n\t\tthis.options;\n\n        this.serviceType = 'Manifest';\n\n\t\t// Wire in logging\n\t\tthis.logInfo = libSimpleLog;\n\t\tthis.logError = libSimpleLog;\n\n\t\t// Create an object address resolver and map in the functions\n\t\tthis.objectAddressCheckAddressExists = new libObjectAddressCheckAddressExists(this.logInfo, this.logError);\n\t\tthis.objectAddressGetValue = new libObjectAddressGetValue(this.logInfo, this.logError);\n\t\tthis.objectAddressSetValue = new libObjectAddressSetValue(this.logInfo, this.logError);\n\t\tthis.objectAddressDeleteValue = new libObjectAddressDeleteValue(this.logInfo, this.logError);\n\n\t\tif (!('defaultValues' in this.options))\n\t\t{\n\t\t\tthis.options.defaultValues = (\n\t\t\t\t{\n\t\t\t\t\t\"String\": \"\",\n\t\t\t\t\t\"Number\": 0,\n\t\t\t\t\t\"Float\": 0.0,\n\t\t\t\t\t\"Integer\": 0,\n\t\t\t\t\t\"PreciseNumber\": \"0.0\",\n\t\t\t\t\t\"Boolean\": false,\n\t\t\t\t\t\"Binary\": 0,\n\t\t\t\t\t\"DateTime\": 0,\n\t\t\t\t\t\"Array\": [],\n\t\t\t\t\t\"Object\": {},\n\t\t\t\t\t\"Null\": null\n\t\t\t\t});\n\t\t}\n\t\tif (!('strict' in this.options))\n\t\t{\n\t\t\tthis.options.strict = false;\n\t\t}\n\n\t\tthis.scope = undefined;\n\t\tthis.elementAddresses = undefined;\n\t\tthis.elementHashes = undefined;\n\t\tthis.elementDescriptors = undefined;\n\n\t\tthis.reset();\n\n\t\tif (typeof(this.options) === 'object')\n\t\t{\n\t\t\tthis.loadManifest(this.options);\n\t\t}\n\n\t\tthis.schemaManipulations = new libSchemaManipulation(this.logInfo, this.logError);\n\t\tthis.objectAddressGeneration = new libObjectAddressGeneration(this.logInfo, this.logError);\n\n\t\tthis.hashTranslations = new libHashTranslation(this.logInfo, this.logError);\n\n\t\tthis.numberRegex = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$/;\n\t}\n\n\t/*************************************************************************\n\t * Schema Manifest Loading, Reading, Manipulation and Serialization Functions\n\t */\n\n\t// Reset critical manifest properties\n\treset()\n\t{\n\t\tthis.scope = 'DEFAULT';\n\t\tthis.elementAddresses = [];\n\t\tthis.elementHashes = {};\n\t\tthis.elementDescriptors = {};\n\t}\n\n\tclone()\n\t{\n\t\t// Make a copy of the options in-place\n\t\tlet tmpNewOptions = JSON.parse(JSON.stringify(this.options));\n\n\t\tlet tmpNewManyfest = new Manyfest(this.getManifest(), this.logInfo, this.logError, tmpNewOptions);\n\n\t\t// Import the hash translations\n\t\ttmpNewManyfest.hashTranslations.addTranslation(this.hashTranslations.translationTable);\n\n\t\treturn tmpNewManyfest;\n\t}\n\n\t// Deserialize a Manifest from a string\n\tdeserialize(pManifestString)\n\t{\n\t\t// TODO: Add guards for bad manifest string\n\t\treturn this.loadManifest(JSON.parse(pManifestString));\n\t}\n\n\t// Load a manifest from an object\n\tloadManifest(pManifest)\n\t{\n\t\tif (typeof(pManifest) !== 'object')\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading manifest; expecting an object but parameter was type ${typeof(pManifest)}.`);\n\t\t}\n\n\t\tlet tmpManifest = (typeof(pManifest) == 'object') ? pManifest : {};\n\n\t\tlet tmpDescriptorKeys = Object.keys(_DefaultConfiguration);\n\n\t\tfor (let i = 0; i < tmpDescriptorKeys.length; i++)\n\t\t{\n\t\t\tif (!(tmpDescriptorKeys[i] in tmpManifest))\n\t\t\t{\n\t\t\t\ttmpManifest[tmpDescriptorKeys[i]] = JSON.parse(JSON.stringify(_DefaultConfiguration[tmpDescriptorKeys[i]]));\n\t\t\t}\n\t\t}\n\n\t\tif ('Scope' in tmpManifest)\n\t\t{\n\t\t\tif (typeof(tmpManifest.Scope) === 'string')\n\t\t\t{\n\t\t\t\tthis.scope = tmpManifest.Scope;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.logError(`(${this.scope}) Error loading scope from manifest; expecting a string but property was type ${typeof(tmpManifest.Scope)}.`, tmpManifest);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading scope from manifest object.  Property \"Scope\" does not exist in the root of the object.`, tmpManifest);\n\t\t}\n\n\t\tif ('Descriptors' in tmpManifest)\n\t\t{\n\t\t\tif (typeof(tmpManifest.Descriptors) === 'object')\n\t\t\t{\n\t\t\t\tlet tmpDescriptionAddresses = Object.keys(tmpManifest.Descriptors);\n\t\t\t\tfor (let i = 0; i < tmpDescriptionAddresses.length; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.addDescriptor(tmpDescriptionAddresses[i], tmpManifest.Descriptors[tmpDescriptionAddresses[i]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.logError(`(${this.scope}) Error loading description object from manifest object.  Expecting an object in 'Manifest.Descriptors' but the property was type ${typeof(tmpManifest.Descriptors)}.`, tmpManifest);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading object description from manifest object.  Property \"Descriptors\" does not exist in the root of the Manifest object.`, tmpManifest);\n\t\t}\n\n\t\tif ('HashTranslations' in tmpManifest)\n\t\t{\n\t\t\tif (typeof(tmpManifest.HashTranslations) === 'object')\n\t\t\t{\n\t\t\t\tfor (let i = 0; i < tmpManifest.HashTranslations.length; i++)\n\t\t\t\t{\n\t\t\t\t\t// Each translation is \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Serialize the Manifest to a string\n\tserialize()\n\t{\n\t\treturn JSON.stringify(this.getManifest());\n\t}\n\n\tgetManifest()\n\t{\n\t\treturn (\n\t\t\t{\n\t\t\t\tScope: this.scope,\n\t\t\t\tDescriptors: JSON.parse(JSON.stringify(this.elementDescriptors)),\n\t\t\t\tHashTranslations: JSON.parse(JSON.stringify(this.hashTranslations.translationTable))\n\t\t\t});\n\t}\n\n\t/**\n\t * Add a descriptor to the manifest\n\t *\n\t * @param {string} pAddress - The address of the element to add the descriptor for.\n\t * @param {ManifestDescriptor} pDescriptor - The descriptor object to add.\n\t */\n\taddDescriptor(pAddress, pDescriptor)\n\t{\n\t\tif (typeof(pDescriptor) === 'object')\n\t\t{\n\t\t\t// Add the Address into the Descriptor if it doesn't exist:\n\t\t\tif (!('Address' in pDescriptor))\n\t\t\t{\n\t\t\t\tpDescriptor.Address = pAddress;\n\t\t\t}\n\n\t\t\tif (!(pAddress in this.elementDescriptors))\n\t\t\t{\n\t\t\t\tthis.elementAddresses.push(pAddress);\n\t\t\t}\n\n\t\t\t// Add the element descriptor to the schema\n\t\t\tthis.elementDescriptors[pAddress] = pDescriptor;\n\n\t\t\t// Always add the address as a hash\n\t\t\tthis.elementHashes[pAddress] = pAddress;\n\n\t\t\tif ('Hash' in pDescriptor)\n\t\t\t{\n\t\t\t\t// TODO: Check if this is a good idea or not..\n\t\t\t\t//       Collisions are bound to happen with both representations of the address/hash in here and developers being able to create their own hashes.\n\t\t\t\tthis.elementHashes[pDescriptor.Hash] = pAddress;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpDescriptor.Hash = pAddress;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error loading object descriptor for address '${pAddress}' from manifest object.  Expecting an object but property was type ${typeof(pDescriptor)}.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} pHash - The hash of the address to resolve.\n\t *\n\t * @return {ManifestDescriptor} The descriptor for the address\n\t */\n\tgetDescriptorByHash(pHash)\n\t{\n\t\treturn this.getDescriptor(this.resolveHashAddress(pHash));\n\t}\n\n\t/**\n\t * @param {string} pAddress - The address of the element to get the descriptor for.\n\t *\n\t * @return {ManifestDescriptor} The descriptor for the address\n\t */\n\tgetDescriptor(pAddress)\n\t{\n\t\treturn this.elementDescriptors[pAddress];\n\t}\n\n\t/**\n\t * execute an action function for each descriptor\n\t * @param {(d: ManifestDescriptor) => void} fAction - The action function to execute for each descriptor.\n\t */\n\teachDescriptor(fAction)\n\t{\n        let tmpDescriptorAddresses = Object.keys(this.elementDescriptors);\n        for (let i = 0; i < tmpDescriptorAddresses.length; i++)\n        {\n            fAction(this.elementDescriptors[tmpDescriptorAddresses[i]]);\n        }\n\n\t}\n\n\t/*************************************************************************\n\t * Beginning of Object Manipulation (read & write) Functions\n\t */\n\t// Check if an element exists by its hash\n\tcheckAddressExistsByHash (pObject, pHash)\n\t{\n\t\treturn this.checkAddressExists(pObject,this.resolveHashAddress(pHash));\n\t}\n\n\t// Check if an element exists at an address\n\tcheckAddressExists (pObject, pAddress)\n\t{\n\t\treturn this.objectAddressCheckAddressExists.checkAddressExists(pObject, pAddress);\n\t}\n\n\t// Turn a hash into an address, factoring in the translation table.\n\tresolveHashAddress(pHash)\n\t{\n\t\tlet tmpAddress = undefined;\n\n\t\tlet tmpInElementHashTable = (pHash in this.elementHashes);\n\t\tlet tmpInTranslationTable = (pHash in this.hashTranslations.translationTable);\n\n\t\t// The most straightforward: the hash exists, no translations.\n\t\tif (tmpInElementHashTable && !tmpInTranslationTable)\n\t\t{\n\t\t\ttmpAddress = this.elementHashes[pHash];\n\t\t}\n\t\t// There is a translation from one hash to another, and, the elementHashes contains the pointer end\n\t\telse if (tmpInTranslationTable && (this.hashTranslations.translate(pHash) in this.elementHashes))\n\t\t{\n\t\t\ttmpAddress = this.elementHashes[this.hashTranslations.translate(pHash)];\n\t\t}\n\t\t// Use the level of indirection only in the Translation Table\n\t\telse if (tmpInTranslationTable)\n\t\t{\n\t\t\ttmpAddress = this.hashTranslations.translate(pHash);\n\t\t}\n\t\t// Just treat the hash as an address.\n\t\t// TODO: Discuss this ... it is magic but controversial\n\t\telse\n\t\t{\n\t\t\ttmpAddress = pHash;\n\t\t}\n\n\t\treturn tmpAddress;\n\t}\n\n\t// Get the value of an element by its hash\n\tgetValueByHash (pObject, pHash)\n\t{\n\t\tlet tmpValue = this.getValueAtAddress(pObject, this.resolveHashAddress(pHash));\n\n\t\tif (typeof(tmpValue) == 'undefined')\n\t\t{\n\t\t\t// Try to get a default if it exists\n\t\t\ttmpValue = this.getDefaultValue(this.getDescriptorByHash(pHash));\n\t\t}\n\n\t\treturn tmpValue;\n\t}\n\n\tlintAddress(pAddress)\n\t{\n\t\tlet tmpLintedAddress = pAddress.trim();\n\t\t// Check for a single . (but not a ..) at the end of the address and remove it.\n\t\tif (tmpLintedAddress.endsWith('..'))\n\t\t{\n\t\t\ttmpLintedAddress = tmpLintedAddress.slice(0, -1);\n\t\t}\n\t\telse if (tmpLintedAddress.endsWith('.'))\n\t\t{\n\t\t\ttmpLintedAddress = tmpLintedAddress.slice(0, -1);\n\t\t}\n\n\t\treturn tmpLintedAddress;\n\t}\n\n\t// Get the value of an element at an address\n\tgetValueAtAddress (pObject, pAddress)\n\t{\n\t\tlet tmpLintedAddress = this.lintAddress(pAddress);\n\t\tif (tmpLintedAddress == '')\n\t\t{\n\t\t\tthis.logError(`(${this.scope}) Error getting value at address; address is an empty string.`, pObject);\n\t\t\treturn undefined;\n\t\t}\n\t\tlet tmpValue = this.objectAddressGetValue.getValueAtAddress(pObject, tmpLintedAddress);\n\n\t\tif (typeof(tmpValue) == 'undefined')\n\t\t{\n\t\t\t// Try to get a default if it exists\n\t\t\ttmpValue = this.getDefaultValue(this.getDescriptor(tmpLintedAddress));\n\t\t}\n\n\t\treturn tmpValue;\n\t}\n\n\t// Set the value of an element by its hash\n\tsetValueByHash(pObject, pHash, pValue)\n\t{\n\t\treturn this.setValueAtAddress(pObject, this.resolveHashAddress(pHash), pValue);\n\t}\n\n\t// Set the value of an element at an address\n\tsetValueAtAddress (pObject, pAddress, pValue)\n\t{\n\t\tlet tmpLintedAddress = this.lintAddress(pAddress);\n\t\treturn this.objectAddressSetValue.setValueAtAddress(pObject, tmpLintedAddress, pValue);\n\t}\n\n\t// Delete the value of an element by its hash\n\tdeleteValueByHash(pObject, pHash, pValue)\n\t{\n\t\treturn this.deleteValueAtAddress(pObject, this.resolveHashAddress(pHash), pValue);\n\t}\n\n\t// Delete the value of an element at an address\n\tdeleteValueAtAddress (pObject, pAddress, pValue)\n\t{\n\t\tlet tmpLintedAddress = this.lintAddress(pAddress);\n\t\treturn this.objectAddressDeleteValue.deleteValueAtAddress(pObject, tmpLintedAddress, pValue);\n\t}\n\n\t// Validate the consistency of an object against the schema\n\tvalidate(pObject)\n\t{\n\t\tlet tmpValidationData =\n\t\t{\n\t\t\tError: null,\n\t\t\tErrors: [],\n\t\t\tMissingElements:[]\n\t\t};\n\n\t\tif (typeof(pObject) !== 'object')\n\t\t{\n\t\t\ttmpValidationData.Error = true;\n\t\t\ttmpValidationData.Errors.push(`Expected passed in object to be type object but was passed in ${typeof(pObject)}`);\n\t\t}\n\n\t\tlet addValidationError = (pAddress, pErrorMessage) =>\n\t\t{\n\t\t\ttmpValidationData.Error = true;\n\t\t\ttmpValidationData.Errors.push(`Element at address \"${pAddress}\" ${pErrorMessage}.`);\n\t\t};\n\n\t\t// Now enumerate through the values and check for anomalies based on the schema\n\t\tfor (let i = 0; i < this.elementAddresses.length; i++)\n\t\t{\n\t\t\tlet tmpDescriptor = this.getDescriptor(this.elementAddresses[i]);\n\t\t\tlet tmpValueExists = this.checkAddressExists(pObject, tmpDescriptor.Address);\n\t\t\tlet tmpValue = this.getValueAtAddress(pObject, tmpDescriptor.Address);\n\n\t\t\tif ((typeof(tmpValue) == 'undefined') || !tmpValueExists)\n\t\t\t{\n\t\t\t\t// This will technically mean that `Object.Some.Value = undefined` will end up showing as \"missing\"\n\t\t\t\t// TODO: Do we want to do a different message based on if the property exists but is undefined?\n\t\t\t\ttmpValidationData.MissingElements.push(tmpDescriptor.Address);\n\t\t\t\tif (tmpDescriptor.Required || this.options.strict)\n\t\t\t\t{\n\t\t\t\t\taddValidationError(tmpDescriptor.Address, 'is flagged REQUIRED but is not set in the object');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Now see if there is a data type specified for this element\n\t\t\tif (tmpDescriptor.DataType)\n\t\t\t{\n\t\t\t\tlet tmpElementType = typeof(tmpValue);\n\t\t\t\tswitch(tmpDescriptor.DataType.toString().trim().toLowerCase())\n\t\t\t\t{\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tif (tmpElementType != 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"precisenumber\":\n\t\t\t\t\t\tif (tmpElementType != 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!this.numberRegex.test(tmpValue))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is not a valid number`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tif (tmpElementType != 'number')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tif (tmpElementType != 'number')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet tmpValueString = tmpValue.toString();\n\t\t\t\t\t\t\tif (tmpValueString.indexOf('.') > -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// TODO: Is this an error?\n\t\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but has a decimal point in the number.`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'float':\n\t\t\t\t\t\tif (tmpElementType != 'number')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'datetime':\n\t\t\t\t\t\tlet tmpValueDate = new Date(tmpValue);\n\t\t\t\t\t\tif (tmpValueDate.toString() == 'Invalid Date')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} but is not parsable as a Date by Javascript`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Check if this is a string, in the default case\n\t\t\t\t\t\t// Note this is only when a DataType is specified and it is an unrecognized data type.\n\t\t\t\t\t\tif (tmpElementType != 'string')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddValidationError(tmpDescriptor.Address, `has a DataType ${tmpDescriptor.DataType} (which auto-converted to String because it was unrecognized) but is of the type ${tmpElementType}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tmpValidationData;\n\t}\n\n\t/**\n\t * Returns a default value, or, the default value for the data type (which is overridable with configuration)\n\t *\n\t * @param {ManifestDescriptor} pDescriptor - The descriptor definition.\n\t */\n\tgetDefaultValue(pDescriptor)\n\t{\n\t\tif (typeof(pDescriptor) != 'object')\n\t\t{\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ('Default' in pDescriptor)\n\t\t{\n\t\t\treturn pDescriptor.Default;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Default to a null if it doesn't have a type specified.\n\t\t\t// This will ensure a placeholder is created but isn't misinterpreted.\n\t\t\tlet tmpDataType = ('DataType' in pDescriptor) ? pDescriptor.DataType : 'String';\n\t\t\tif (tmpDataType in this.options.defaultValues)\n\t\t\t{\n\t\t\t\treturn this.options.defaultValues[tmpDataType];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// give up and return null\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Enumerate through the schema and populate default values if they don't exist.\n\tpopulateDefaults(pObject, pOverwriteProperties)\n\t{\n\t\treturn this.populateObject(pObject, pOverwriteProperties,\n\t\t\t// This just sets up a simple filter to see if there is a default set.\n\t\t\t(pDescriptor) =>\n\t\t\t{\n\t\t\t\treturn ('Default' in pDescriptor);\n\t\t\t});\n\t}\n\n\t// Forcefully populate all values even if they don't have defaults.\n\t// Based on type, this can do unexpected things.\n\tpopulateObject(pObject, pOverwriteProperties, fFilter)\n\t{\n\t\t// Automatically create an object if one isn't passed in.\n\t\tlet tmpObject = (typeof(pObject) === 'object') ? pObject : {};\n\t\t// Default to *NOT OVERWRITING* properties\n\t\tlet tmpOverwriteProperties = (typeof(pOverwriteProperties) == 'undefined') ? false : pOverwriteProperties;\n\t\t// This is a filter function, which is passed the schema and allows complex filtering of population\n\t\t// The default filter function just returns true, populating everything.\n\t\tlet tmpFilterFunction = (typeof(fFilter) == 'function') ? fFilter : (pDescriptor) => { return true; };\n\n\t\tthis.elementAddresses.forEach(\n\t\t\t(pAddress) =>\n\t\t\t{\n\t\t\t\tlet tmpDescriptor = this.getDescriptor(pAddress);\n\t\t\t\t// Check the filter function to see if this is an address we want to set the value for.\n\t\t\t\tif (tmpFilterFunction(tmpDescriptor))\n\t\t\t\t{\n\t\t\t\t\t// If we are overwriting properties OR the property does not exist\n\t\t\t\t\tif (tmpOverwriteProperties || !this.checkAddressExists(tmpObject, pAddress))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setValueAtAddress(tmpObject, pAddress, this.getDefaultValue(tmpDescriptor));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn tmpObject;\n\t}\n};\n\nmodule.exports = Manyfest;\n"]}